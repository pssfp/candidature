<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/application/controllers/candidature.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/application/controllers/candidature.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;if (!defined('BASEPATH'))&#10;    exit('No direct script access allowed');&#10;&#10;class Candidature extends MY_Controller {&#10;&#10;    public $form_data;&#10;&#10;    /**&#10;     * Index Page for this controller.&#10;     *&#10;     * Maps to the following URL&#10;     * &#9;&#9;http://example.com/index.php/welcome&#10;     * &#9;- or -&#10;     * &#9;&#9;http://example.com/index.php/welcome/index&#10;     * &#9;- or -&#10;     * Since this controller is set as the default controller in&#10;     * config/routes.php, it's displayed at http://example.com/&#10;     *&#10;     * So any other public methods not prefixed with an underscore will&#10;     * map to /index.php/welcome/&lt;method_name&gt;&#10;     * @see http://codeigniter.com/user_guide/general/urls.html&#10;     */&#10;    public function __construct() {&#10;        parent::__construct();&#10;&#10;        // load library&#10;        $this-&gt;load-&gt;library(array('table', 'form_validation'));&#10;        $this-&gt;load-&gt;library('session');&#10;        $this-&gt;load-&gt;library('email');&#10;        // Remove duplicate email loading&#10;        // load helper&#10;        $this-&gt;load-&gt;helper('url');&#10;&#10;        // load model&#10;        $this-&gt;load-&gt;model('Model_generique', 'model', TRUE);&#10;    }&#10;&#10;    public function index() {&#10;        //&#9;$this-&gt;load-&gt;view('welcome_message');&#10;        // $data = array();&#10;        $submitname = &quot;enregistrer&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $data[&quot;specialites&quot;] = $this-&gt;model-&gt;list_all(&quot;specialite&quot;)-&gt;result();&#10;        $data[&quot;pays&quot;] = $this-&gt;model-&gt;list_all(&quot;pays&quot;)-&gt;result();&#10;        $data['action'] = site_url('candidature/add/');&#10;        //redirect('candidature/add/');&#10;        $this-&gt;template-&gt;layout('candidature', $data);&#10;    }&#10;&#10;    public function add() {&#10;        $this-&gt;load-&gt;library('form_validation');&#10;        $table = 'candidats';&#10;        $data = array();&#10;        $submitname = &quot;enregistrer&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $data[&quot;specialites&quot;] = $this-&gt;model-&gt;list_all(&quot;specialite&quot;)-&gt;result();&#10;        $data[&quot;pays&quot;] = $this-&gt;model-&gt;list_all(&quot;pays&quot;)-&gt;result();&#10;        $data['action'] = site_url('candidature/add/');&#10;&#10;        // Set validation rules&#10;        $this-&gt;form_validation-&gt;set_rules('specialite', 'Spécialité', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('type_etude', 'Mode de formation', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('civilite', 'Civilité', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('nom', 'Nom', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('prenom', 'Prénom', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('datenaiss_jj', 'Jour de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('datenaiss_mm', 'Mois de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('datenaiss_yy', 'Année de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('lieu_de_naissce', 'Lieu de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('nationalite', 'Nationalité', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('paysorigine', 'Pays d\'origine', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('statu_matrimonial', 'Statut matrimonial', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('adresse_candidat', 'Adresse complète', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('ville_residence', 'Ville de résidence', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('pays_residence', 'Pays de résidence', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('telephone', 'Téléphone WhatsApp', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|valid_email|matches[emailverif]');&#10;        $this-&gt;form_validation-&gt;set_rules('emailverif', 'Confirmation Email', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('engagement', 'Engagement', 'required');&#10;&#10;        if ($this-&gt;form_validation-&gt;run() == FALSE) {&#10;            // If validation fails or form is not submitted, redisplay the form&#10;            $this-&gt;form_data = new stdClass();&#10;            foreach ($this-&gt;input-&gt;post() as $key =&gt; $value) {&#10;                $this-&gt;form_data-&gt;$key = $value;&#10;            }&#10;            // For fields not in post, initialize them&#10;            $fields = ['type_etude', 'specialite', 'civilite', 'nom', 'prenom', 'epouse', 'nombre_enfant', 'datenaiss_jj', 'datenaiss_mm', 'datenaiss_yy', 'lieu_de_naissce', 'nationalite', 'paysorigine', 'region_dorigine', 'dept_dorigine', 'sexe', 'statu_matrimonial', 'langue', 'pays_residence', 'adresse_candidat', 'ville_residence', 'telephone', 'telephone2', 'email', 'emailverif', 'dernier_diplome', 'diplome_requis', 'specialite_requise', 'annee_optention_diplome', 'statut_prof', 'structure', 'adresse_structure', 'telephone_structure', 'email_structure', 'howDidYouKnewUs'];&#10;            foreach ($fields as $field) {&#10;                if (!isset($this-&gt;form_data-&gt;$field)) {&#10;                    $this-&gt;form_data-&gt;$field = '';&#10;                }&#10;            }&#10;&#10;            $this-&gt;template-&gt;layout('candidature', $data);&#10;        } else {&#10;            // If validation is successful, process the data&#10;            $candidat_data = array();&#10;            $fields = ['type_etude', 'specialite', 'civilite', 'nom', 'prenom', 'epouse', 'nombre_enfant', 'lieu_de_naissce', 'nationalite', 'paysorigine', 'region_dorigine', 'dept_dorigine', 'sexe', 'statu_matrimonial', 'langue', 'pays_residence', 'adresse_candidat', 'ville_residence', 'telephone', 'telephone2', 'email', 'dernier_diplome', 'diplome_requis', 'specialite_requise', 'annee_optention_diplome', 'statut_prof', 'structure', 'adresse_structure', 'telephone_structure', 'email_structure', 'howDidYouKnewUs'];&#10;            foreach ($fields as $field) {&#10;                $candidat_data[$field] = $this-&gt;input-&gt;post($field);&#10;            }&#10;            $candidat_data['date_naissance'] = $this-&gt;input-&gt;post('datenaiss_yy') . '-' . $this-&gt;input-&gt;post('datenaiss_mm') . '-' . $this-&gt;input-&gt;post('datenaiss_jj');&#10;&#10;            // Assuming you have a model method to insert data&#10;            $this-&gt;model-&gt;create($table, $candidat_data);&#10;&#10;            // Redirect to a success page&#10;            redirect('candidature/success'); // You need to create this success page and method&#10;        }&#10;    }&#10;&#10;    public function success() {&#10;        $this-&gt;template-&gt;layout('success_page'); // Create a success view&#10;    }&#10;&#10;    public function viewnumordre(){&#10;        $data=array();&#10;        $this-&gt;template-&gt;layout('numOrdreCandidature', $data);&#10;    }&#10;&#10;    public function initupdate() {&#10;        $this-&gt;form_data = new stdclass;&#10;        $this-&gt;form_data-&gt;numordre = '';&#10;        $this-&gt;form_data-&gt;telephone = '';&#10;        $submitname = &quot;modifier&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $data['action'] = site_url('candidature/verifinitupdate/');&#10;        $this-&gt;template-&gt;layout('firstformupdate', $data);&#10;    }&#10;&#10;    public function verifinitupdate() {&#10;        $table = 'candidats';&#10;        $submitname = &quot;modifier&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $numordre = $this-&gt;input-&gt;post('numordre');&#10;        $phone = $this-&gt;input-&gt;post('telephone');&#10;        $candidature = $this-&gt;model-&gt;get_by_id($table, $numordre, 'ordre_candidature')-&gt;row();&#10;        if ($candidature == null || $candidature-&gt;telephone !== $phone) {&#10;            $this-&gt;form_data = new stdclass;&#10;            $this-&gt;form_data-&gt;numordre = $this-&gt;input-&gt;post('numordre');&#10;            $this-&gt;form_data-&gt;telephone = $this-&gt;input-&gt;post('telephone');&#10;            $data['action'] = site_url('candidature/verifinitupdate/');&#10;            $data['message'] = &quot;Vérifier vos informations&quot;;&#10;            $this-&gt;template-&gt;layout('firstformupdate', $data);&#10;        } else {&#10;            redirect('candidature/update/'.$numordre.&quot;/&quot;.$phone);&#10;        }&#10;    }&#10;&#10;    public function marquerdeposer($id_candidat) {&#10;        $this-&gt;load-&gt;model('impression_model', '', TRUE);&#10;        $candidat = array(&#10;            'a_depose' =&gt; true&#10;        );&#10;        $this-&gt;model-&gt;update(&quot;candidats&quot;, 'id', $id_candidat, $candidat);&#10;        redirect('liste');&#10;    }&#10;&#10;    public function update($numordre = 0, $phone = '') {&#10;        $table = 'candidats';&#10;        $submitname = &quot;modifier&quot;;&#10;        $data['submitname'] = $submitname;&#10;&#10;        $candidature = $this-&gt;model-&gt;get_by_id($table, $numordre, 'ordre_candidature')-&gt;row();&#10;&#10;        $data[&quot;specialites&quot;] = $this-&gt;model-&gt;list_all(&quot;specialite&quot;)-&gt;result();&#10;        $data[&quot;pays&quot;] = $this-&gt;model-&gt;list_all(&quot;pays&quot;)-&gt;result();&#10;        $data['action'] = site_url('candidature/update/'.$numordre.&quot;/&quot;.$phone);&#10;&#10;        $this-&gt;form_data = new stdclass;&#10;        $this-&gt;form_data-&gt;type_etude= $candidature-&gt;type_etude;&#10;        $this-&gt;form_data-&gt;specialite = $candidature-&gt;id_specialite;&#10;        $this-&gt;form_data-&gt;civilite = $candidature-&gt;civilite;&#10;        $this-&gt;form_data-&gt;nom = $candidature-&gt;nom;&#10;        $this-&gt;form_data-&gt;prenom = $candidature-&gt;prenom;&#10;        $this-&gt;form_data-&gt;epouse = $candidature-&gt;epouse;&#10;        $this-&gt;form_data-&gt;nombre_enfant = $candidature-&gt;nombre_enfant;&#10;        $date = explode(&quot;-&quot;, $candidature-&gt;date_naissance); //$candidature-&gt;date_naissance&#10;        $this-&gt;form_data-&gt;datenaiss_jj = $date[2];&#10;        $this-&gt;form_data-&gt;datenaiss_mm = $date[1];&#10;        $this-&gt;form_data-&gt;datenaiss_yy = $date[0];&#10;        $this-&gt;form_data-&gt;lieu_de_naissce = $candidature-&gt;lieu_de_naissce;&#10;        $this-&gt;form_data-&gt;nationalite = $candidature-&gt;nationalite;&#10;        $this-&gt;form_data-&gt;paysorigine = $candidature-&gt;paysorigine;&#10;        $this-&gt;form_data-&gt;region_dorigine = $candidature-&gt;region_dorigine;&#10;        $this-&gt;form_data-&gt;dept_dorigine = $candidature-&gt;dept_dorigine;&#10;        $this-&gt;form_data-&gt;sexe = $candidature-&gt;sexe;&#10;        $this-&gt;form_data-&gt;statu_matrimonial = $candidature-&gt;statu_matrimonial;&#10;        $this-&gt;form_data-&gt;nombre_enfant = $candidature-&gt;nombre_enfant;&#10;        $this-&gt;form_data-&gt;langue = $candidature-&gt;langue;&#10;        $this-&gt;form_data-&gt;pays_residence = $candidature-&gt;id_pays;&#10;        $this-&gt;form_data-&gt;adresse_candidat = $candidature-&gt;adresse_candidat;&#10;        $this-&gt;form_data-&gt;ville_residence = $candidature-&gt;ville_residence;&#10;        $this-&gt;form_data-&gt;telephone = $candidature-&gt;telephone;&#10;        $this-&gt;form_data-&gt;telephone2 = $candidature-&gt;telephone;&#10;        $this-&gt;form_data-&gt;email = $candidature-&gt;email;&#10;        $this-&gt;form_data-&gt;emailverif = $candidature-&gt;email;&#10;        $this-&gt;form_data-&gt;nombre_annee_etude_sup = $candidature-&gt;nombre_annee_etude_sup;&#10;        $this-&gt;form_data-&gt;dernier_diplome = $candidature-&gt;dernier_diplome;&#10;        $this-&gt;form_data-&gt;dernier_diplome = $candidature-&gt;dernier_diplome;&#10;        $this-&gt;form_data-&gt;specialite_requise = $candidature-&gt;specialite_requise;&#10;        $this-&gt;form_data-&gt;diplome_requis = $candidature-&gt;diplome_requis;&#10;        $this-&gt;form_data-&gt;diplome_obtenu_a = $candidature-&gt;diplome_obtenu_a;&#10;        $this-&gt;form_data-&gt;annee_optention_diplome = $candidature-&gt;annee_optention_diplome;&#10;        $this-&gt;form_data-&gt;statut_prof = $candidature-&gt;statut_prof;&#10;        $this-&gt;form_data-&gt;structure = $candidature-&gt;structure;&#10;        $this-&gt;form_data-&gt;adresse_structure = $candidature-&gt;adresse_structure;&#10;        $this-&gt;form_data-&gt;telephone_structure = $candidature-&gt;telephone_structure;&#10;        $this-&gt;form_data-&gt;email_structure = $candidature-&gt;email_structure;&#10;        $this-&gt;form_data-&gt;howDidYouKnewUs = $candidature-&gt;howDidYouKnewUs;&#10;        //$this-&gt;form_data-&gt;accepter_condition              Pas besoin d'enregistrer cette variable&#10;        if (isset($_POST[$submitname])) {&#10;            // Validation rules for update - exclude current record from uniqueness check&#10;            $this-&gt;form_validation-&gt;set_rules('telephone', 'Numéro de téléphone principal', 'trim|required|is_unique[candidats.telephone.id.' . $candidature-&gt;id . ']|is_unique[candidats.telephone2.id.' . $candidature-&gt;id . ']');&#10;            $this-&gt;form_validation-&gt;set_rules('telephone2', 'Numéro de téléphone secondaire', 'trim|is_unique[candidats.telephone2.id.' . $candidature-&gt;id . ']|is_unique[candidats.telephone.id.' . $candidature-&gt;id . ']|differs[telephone]');&#10;            $this-&gt;form_validation-&gt;set_rules('email', 'Adresse e-mail', 'trim|required|valid_email|is_unique[candidats.email.id.' . $candidature-&gt;id . ']');&#10;            $this-&gt;form_validation-&gt;set_rules('emailverif', 'Confirmation de l\'adresse e-mail', 'trim|required|valid_email|matches[email]');&#10;&#10;            // Set custom error messages with clear and specific descriptions&#10;            $this-&gt;form_validation-&gt;set_message('required', 'Le champ %s est obligatoire.');&#10;            $this-&gt;form_validation-&gt;set_message('is_unique', 'Ce %s est déjà utilisé par un autre candidat. Veuillez en saisir un autre.');&#10;            $this-&gt;form_validation-&gt;set_message('matches', 'La confirmation de l\'adresse e-mail ne correspond pas à l\'adresse e-mail principale.');&#10;            $this-&gt;form_validation-&gt;set_message('differs', 'Le numéro de téléphone secondaire doit être différent du numéro principal.');&#10;            $this-&gt;form_validation-&gt;set_message('valid_email', 'Veuillez saisir une adresse e-mail valide.');&#10;&#10;            // ...existing code...&#10;            if ($this-&gt;form_validation-&gt;run() == FALSE) {&#10;                $this-&gt;form_data-&gt;specialite = $this-&gt;input-&gt;post('specialite');&#10;                $this-&gt;form_data-&gt;civilite = $this-&gt;input-&gt;post('civilite');&#10;                $this-&gt;form_data-&gt;nom = $this-&gt;input-&gt;post('nom');&#10;                $this-&gt;form_data-&gt;prenom = $this-&gt;input-&gt;post('prenom');&#10;                $this-&gt;form_data-&gt;epouse = $this-&gt;input-&gt;post('epouse');&#10;                $this-&gt;form_data-&gt;nombre_enfant = $this-&gt;input-&gt;post('nombre_enfant');&#10;                $this-&gt;form_data-&gt;datenaiss_jj = $this-&gt;input-&gt;post('datenaiss_jj');&#10;                $this-&gt;form_data-&gt;datenaiss_mm = $this-&gt;input-&gt;post('datenaiss_mm');&#10;                $this-&gt;form_data-&gt;datenaiss_yy = $this-&gt;input-&gt;post('datenaiss_yy');&#10;                $this-&gt;form_data-&gt;lieu_de_naissce = $this-&gt;input-&gt;post('lieu_de_naissce');&#10;                $this-&gt;form_data-&gt;nationalite = $this-&gt;input-&gt;post('nationalite');&#10;                $this-&gt;form_data-&gt;paysorigine = $this-&gt;input-&gt;post('paysorigine');&#10;                $this-&gt;form_data-&gt;region_dorigine = $this-&gt;input-&gt;post('region_dorigine');&#10;                $this-&gt;form_data-&gt;dept_dorigine = $this-&gt;input-&gt;post('dept_dorigine');&#10;                $this-&gt;form_data-&gt;statu_matrimonial = $this-&gt;input-&gt;post('statu_matrimonial');&#10;                $this-&gt;form_data-&gt;nombre_enfant = $this-&gt;input-&gt;post('nombre_enfant');&#10;                $this-&gt;form_data-&gt;langue = 'Français';&#10;                $this-&gt;form_data-&gt;pays_residence = $this-&gt;input-&gt;post('pays_residence');&#10;                $this-&gt;form_data-&gt;adresse_candidat = $this-&gt;input-&gt;post('adresse_candidat');&#10;                $this-&gt;form_data-&gt;ville_residence = $this-&gt;input-&gt;post('ville_residence');&#10;                $this-&gt;form_data-&gt;telephone = $this-&gt;input-&gt;post('telephone');&#10;                $this-&gt;form_data-&gt;telephone2 = $this-&gt;input-&gt;post('telephone2');&#10;                $this-&gt;form_data-&gt;email = $this-&gt;input-&gt;post('email');&#10;                $this-&gt;form_data-&gt;emailverif = $this-&gt;input-&gt;post('emailverif');&#10;                $this-&gt;form_data-&gt;nombre_annee_etude_sup = $this-&gt;input-&gt;post('nombre_annee_etude_sup');&#10;                $this-&gt;form_data-&gt;dernier_diplome = $this-&gt;input-&gt;post('dernier_diplome');&#10;                $this-&gt;form_data-&gt;specialite_requise = $this-&gt;input-&gt;post('specialite_requise');&#10;                $this-&gt;form_data-&gt;diplome_requis = $this-&gt;input-&gt;post('diplome_requis');&#10;                $this-&gt;form_data-&gt;diplome_obtenu_a = $this-&gt;input-&gt;post('diplome_obtenu_a');&#10;                $this-&gt;form_data-&gt;annee_optention_diplome = $this-&gt;input-&gt;post('annee_optention_diplome');&#10;                $this-&gt;form_data-&gt;statut_prof = $this-&gt;input-&gt;post('statut_prof');&#10;                $this-&gt;form_data-&gt;structure = $this-&gt;input-&gt;post('structure');&#10;                $this-&gt;form_data-&gt;adresse_structure = $this-&gt;input-&gt;post('adresse_structure');&#10;                $this-&gt;form_data-&gt;telephone_structure = $this-&gt;input-&gt;post('telephone_structure');&#10;                $this-&gt;form_data-&gt;email_structure = $this-&gt;input-&gt;post('email_structure');&#10;                $this-&gt;form_data-&gt;howDidYouKnewUs = $this-&gt;input-&gt;post('howDidYouKnewUs');&#10;                $data['message'] = 'Des erreurs ont été rencontrées lors de l\'enregistrement de votre fiche&lt;br/&gt; verifier vos informations et corriger les problèmes signalés';&#10;            } else {&#10;                $candidat = array(&#10;                    'civilite' =&gt; $this-&gt;input-&gt;post('civilite'),&#10;                    'type_etude' =&gt; $this-&gt;input-&gt;post('type_etude'),&#10;                    'nom' =&gt; $this-&gt;input-&gt;post('nom'),&#10;                    'prenom' =&gt; $this-&gt;input-&gt;post('prenom'),&#10;                    'epouse' =&gt; $this-&gt;input-&gt;post('epouse'),&#10;                    'nombre_enfant' =&gt; $this-&gt;input-&gt;post('nombre_enfant'),&#10;                    'date_naissance' =&gt; implode('-', array($this-&gt;input-&gt;post('datenaiss_yy'), $this-&gt;input-&gt;post('datenaiss_mm'), $this-&gt;input-&gt;post('datenaiss_jj'))),&#10;                    'lieu_de_naissce' =&gt; $this-&gt;input-&gt;post('lieu_de_naissce'),&#10;                    'nationalite' =&gt; $this-&gt;input-&gt;post('nationalite'),&#10;                    'paysorigine' =&gt; $this-&gt;input-&gt;post('paysorigine'),&#10;                    'region_dorigine' =&gt; $this-&gt;input-&gt;post('region_dorigine'),&#10;                    'dept_dorigine' =&gt; $this-&gt;input-&gt;post('dept_dorigine'),&#10;                    'statu_matrimonial' =&gt; $this-&gt;input-&gt;post('statu_matrimonial'),&#10;                    'adresse_candidat' =&gt; $this-&gt;input-&gt;post('adresse_candidat'),&#10;                    'telephone' =&gt; $this-&gt;input-&gt;post('telephone'),&#10;                    'telephone2' =&gt; $this-&gt;input-&gt;post('telephone2'),&#10;                    //'email' =&gt; $this-&gt;input-&gt;post('email'),&#10;                    'ville_residence' =&gt; $this-&gt;input-&gt;post('ville_residence'),&#10;                    'nombre_annee_etude_sup' =&gt; $this-&gt;input-&gt;post('nombre_annee_etude_sup'),&#10;                    'dernier_diplome' =&gt; $this-&gt;input-&gt;post('dernier_diplome'),&#10;                    'specialite_requise' =&gt; $this-&gt;input-&gt;post('specialite_requise'),&#10;                    'diplome_requis' =&gt; $this-&gt;input-&gt;post('diplome_requis'),&#10;                    'diplome_obtenu_a' =&gt; $this-&gt;input-&gt;post('diplome_obtenu_a'),&#10;                    'annee_optention_diplome' =&gt; $this-&gt;input-&gt;post('annee_optention_diplome'),&#10;                    'statut_prof' =&gt; $this-&gt;input-&gt;post('statut_prof'),&#10;                    'structure' =&gt; $this-&gt;input-&gt;post('structure'),&#10;                    'adresse_structure' =&gt; $this-&gt;input-&gt;post('adresse_structure'),&#10;                    'email_structure' =&gt; $this-&gt;input-&gt;post('email_structure'),&#10;                    'howDidYouKnewUs' =&gt; $this-&gt;input-&gt;post('howDidYouKnewUs'),&#10;                    'telephone_structure' =&gt; $this-&gt;input-&gt;post('telephone_structure'),&#10;                    'langue' =&gt; $this-&gt;input-&gt;post('langue'),&#10;                    'id_specialite' =&gt; $this-&gt;input-&gt;post('specialite'),&#10;                    'id_pays' =&gt; $this-&gt;input-&gt;post('pays_residence'),&#10;                    'pays_residence' =&gt; $this-&gt;model-&gt;get_by_id(&quot;pays&quot;, $this-&gt;input-&gt;post('pays_residence'), &quot;id&quot;)-&gt;row()-&gt;nom,&#10;                    //'ordre_candidature' =&gt; $numordre,&#10;                    'date_enregistrement' =&gt; date(&quot;Y-m-d H:i:s&quot;),&#10;                    'sexe' =&gt; ($this-&gt;input-&gt;post('civilite') === &quot;Monsieur&quot;) ? &quot;Homme&quot; : &quot;Femme&quot;,&#10;                    'accepter_condition' =&gt; true&#10;                );&#10;                //$this-&gt;model-&gt;save($table, $candidat);&#10;                $this-&gt;model-&gt;update($table, 'id', $candidature-&gt;id, $candidat);&#10;&#10;//                Creation de l'email a envoyé'&#10;                $email_setting['charset'] = 'utf-8';&#10;                $email_setting['mailtype'] = 'html';&#10;                $this-&gt;email-&gt;initialize($email_setting);&#10;                $this-&gt;email-&gt;from('info@pfinancespubliques.org', '[PSSFP] DEPOT de CANDIDATURE 12eme PROMOTION 2024/2025 ');&#10;                $this-&gt;email-&gt;to($this-&gt;input-&gt;post('email'));&#10;                $this-&gt;email-&gt;newline = &quot;\r\n&quot;;&#10;                $this-&gt;email-&gt;crlf = &quot;\n&quot;;&#10;                $specialite_candidat= $this-&gt;model-&gt;get_by_id2('specialite', $this-&gt;input-&gt;post('specialite'));&#10;                $this-&gt;email-&gt;subject('Enregistrement candidature N°'.$candidature-&gt;id);&#10;                $this-&gt;email-&gt;message('&#10;                    &lt;h2&gt;Confirmation de Candidature&lt;/h2&gt;&#10;&#10;                    &lt;p&gt;Cher(e) ' . $this-&gt;input-&gt;post('civilite') . ' ' . $this-&gt;input-&gt;post('nom') . ' ' . $this-&gt;input-&gt;post('prenom') . ',&lt;/p&gt;&#10;&#10;                    &lt;p&gt;Nous vous informons que votre candidature a bien été enregistrée avec les détails suivants :&lt;/p&gt;&#10;&#10;                    &lt;table&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Dossier N°&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $candidature-&gt;id . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;N° de téléphone&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('telephone') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Spécialité&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $specialite_candidat-&gt;nom . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Type de formation&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('type_etude') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Statut&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('statut_prof') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Administration d\'origine&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('structure') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Nationalité&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('nationalite') . '&lt;/td&gt;&lt;/tr&gt;&#10;                    &lt;/table&gt;&#10;&#10;                    &lt;h3&gt;Actions importantes :&lt;/h3&gt;&#10;                    &lt;ul&gt;&#10;                        &lt;li&gt;&lt;a href=&quot;' . site_url('impression/imprimer_fiche/' . $candidature-&gt;id) . '&quot;&gt;Télécharger votre fiche de candidature&lt;/a&gt;&lt;/li&gt;&#10;                        &lt;li&gt;&lt;a href=&quot;' . site_url('candidature/initupdate/' ) . '&quot;&gt;Modifier les informations de votre candidature&lt;/a&gt;&lt;/li&gt;&#10;                    &lt;/ul&gt;&#10;&#10;                    &lt;p&gt;Pour toute modification, veuillez utiliser les identifiants suivants :&lt;/p&gt;&#10;                    &lt;ul&gt;&#10;                        &lt;li&gt;&lt;strong&gt;Numéro d\'ordre&lt;/strong&gt; : ' . $candidature-&gt;id . '&lt;/li&gt;&#10;                        &lt;li&gt;&lt;strong&gt;N° de téléphone&lt;/strong&gt; : ' . $this-&gt;input-&gt;post('telephone') . '&lt;/li&gt;&#10;                    &lt;/ul&gt;&#10;&#10;                    &lt;hr&gt;&#10;&#10;                    &lt;footer style=&quot;color: #666; font-size: 0.9em;&quot;&gt;&#10;                        &lt;p&gt;PSSFP: B.P: 16 578 Yaoundé – Cameroun&lt;br&gt;&#10;                        Tel.: + (237) 697 921 332&lt;br&gt;&#10;                             (237) 677 257 272&lt;br&gt;&#10;                             (237) 671 171 808&lt;/p&gt;&#10;                    &lt;/footer&gt;&#10;                ');&#10;&#10;&#10;                $this-&gt;email-&gt;send();&#10;&#10;                $this-&gt;session-&gt;set_flashdata('succes', 'Modification de la Candidature enrégistrée avec succes, votre numéro d\'ordre a été envoyé à votre adresse mail!!');&#10;&#10;                $this-&gt;session-&gt;set_flashdata('id', $candidature-&gt;ordre_candidature);&#10;                $this-&gt;session-&gt;set_flashdata('numordre', $candidature-&gt;ordre_candidature);&#10;                $this-&gt;session-&gt;set_flashdata('telephone', $candidature-&gt;telephone);&#10;                $this-&gt;session-&gt;set_flashdata('email', $candidature-&gt;email);&#10;                redirect('candidature/viewnumordre');&#10;            }&#10;        }&#10;        $this-&gt;template-&gt;layout('candidature', $data);&#10;    }&#10;&#10;    public function initRecupOrdre(){&#10;        $data=array();&#10;        $this-&gt;template-&gt;layout('formEmailForNumOrdre', $data);&#10;    }&#10;&#10;    /**&#10;     * Reset form data by initializing all properties to empty values&#10;     */&#10;    private function reset_form_data() {&#10;        // Initialize form_data object if it doesn't exist&#10;        if (!isset($this-&gt;form_data)) {&#10;            $this-&gt;form_data = new stdClass();&#10;        }&#10;&#10;        // Reset all form fields to empty values&#10;        $this-&gt;form_data-&gt;specialite = '';&#10;        $this-&gt;form_data-&gt;type_etude = '';&#10;        $this-&gt;form_data-&gt;civilite = '';&#10;        $this-&gt;form_data-&gt;nom = '';&#10;        $this-&gt;form_data-&gt;prenom = '';&#10;        $this-&gt;form_data-&gt;epouse = '';&#10;        $this-&gt;form_data-&gt;nombre_enfant = '';&#10;        $this-&gt;form_data-&gt;datenaiss_jj = '';&#10;        $this-&gt;form_data-&gt;datenaiss_mm = '';&#10;        $this-&gt;form_data-&gt;datenaiss_yy = '';&#10;        $this-&gt;form_data-&gt;lieu_de_naissce = '';&#10;        $this-&gt;form_data-&gt;nationalite = '';&#10;        $this-&gt;form_data-&gt;paysorigine = '';&#10;        $this-&gt;form_data-&gt;region_dorigine = '';&#10;        $this-&gt;form_data-&gt;dept_dorigine = '';&#10;        $this-&gt;form_data-&gt;sexe = '';&#10;        $this-&gt;form_data-&gt;statu_matrimonial = '';&#10;        $this-&gt;form_data-&gt;langue = '';&#10;        $this-&gt;form_data-&gt;pays_residence = '';&#10;        $this-&gt;form_data-&gt;adresse_candidat = '';&#10;        $this-&gt;form_data-&gt;ville_residence = '';&#10;        $this-&gt;form_data-&gt;telephone = '';&#10;        $this-&gt;form_data-&gt;telephone2 = '';&#10;        $this-&gt;form_data-&gt;email = '';&#10;        $this-&gt;form_data-&gt;emailverif = '';&#10;        $this-&gt;form_data-&gt;nombre_annee_etude_sup = '';&#10;        $this-&gt;form_data-&gt;dernier_diplome = '';&#10;        $this-&gt;form_data-&gt;specialite_requise = '';&#10;        $this-&gt;form_data-&gt;diplome_requis = '';&#10;        $this-&gt;form_data-&gt;diplome_obtenu_a = '';&#10;        $this-&gt;form_data-&gt;annee_optention_diplome = '';&#10;        $this-&gt;form_data-&gt;statut_prof = '';&#10;        $this-&gt;form_data-&gt;structure = '';&#10;        $this-&gt;form_data-&gt;adresse_structure = '';&#10;        $this-&gt;form_data-&gt;telephone_structure = '';&#10;        $this-&gt;form_data-&gt;email_structure = '';&#10;        $this-&gt;form_data-&gt;howDidYouKnewUs = '';&#10;    }&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;if (!defined('BASEPATH'))&#10;    exit('No direct script access allowed');&#10;&#10;class Candidature extends MY_Controller {&#10;&#10;    public $form_data;&#10;&#10;    /**&#10;     * Index Page for this controller.&#10;     *&#10;     * Maps to the following URL&#10;     * &#9;&#9;http://example.com/index.php/welcome&#10;     * &#9;- or -&#10;     * &#9;&#9;http://example.com/index.php/welcome/index&#10;     * &#9;- or -&#10;     * Since this controller is set as the default controller in&#10;     * config/routes.php, it's displayed at http://example.com/&#10;     *&#10;     * So any other public methods not prefixed with an underscore will&#10;     * map to /index.php/welcome/&lt;method_name&gt;&#10;     * @see http://codeigniter.com/user_guide/general/urls.html&#10;     */&#10;    public function __construct() {&#10;        parent::__construct();&#10;&#10;        // load library&#10;        $this-&gt;load-&gt;library(array('table', 'form_validation'));&#10;        $this-&gt;load-&gt;library('session');&#10;        $this-&gt;load-&gt;library('email');&#10;        // Remove duplicate email loading&#10;        // load helper&#10;        $this-&gt;load-&gt;helper('url');&#10;&#10;        // load model&#10;        $this-&gt;load-&gt;model('Model_generique', 'model', TRUE);&#10;    }&#10;&#10;    public function index() {&#10;        //&#9;$this-&gt;load-&gt;view('welcome_message');&#10;        // $data = array();&#10;        $submitname = &quot;enregistrer&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $data[&quot;specialites&quot;] = $this-&gt;model-&gt;list_all(&quot;specialite&quot;)-&gt;result();&#10;        $data[&quot;pays&quot;] = $this-&gt;model-&gt;list_all(&quot;pays&quot;)-&gt;result();&#10;        $data['action'] = site_url('candidature/add/');&#10;        //redirect('candidature/add/');&#10;        $this-&gt;template-&gt;layout('candidature', $data);&#10;    }&#10;&#10;    public function add() {&#10;        $this-&gt;load-&gt;library('form_validation');&#10;        $table = 'candidats';&#10;        $data = array();&#10;        $submitname = &quot;enregistrer&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $data[&quot;specialites&quot;] = $this-&gt;model-&gt;list_all(&quot;specialite&quot;)-&gt;result();&#10;        $data[&quot;pays&quot;] = $this-&gt;model-&gt;list_all(&quot;pays&quot;)-&gt;result();&#10;        $data['action'] = site_url('candidature/add/');&#10;&#10;        // Set validation rules&#10;        $this-&gt;form_validation-&gt;set_rules('specialite', 'Spécialité', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('type_etude', 'Mode de formation', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('civilite', 'Civilité', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('nom', 'Nom', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('prenom', 'Prénom', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('datenaiss_jj', 'Jour de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('datenaiss_mm', 'Mois de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('datenaiss_yy', 'Année de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('lieu_de_naissce', 'Lieu de naissance', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('nationalite', 'Nationalité', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('paysorigine', 'Pays d\'origine', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('statu_matrimonial', 'Statut matrimonial', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('adresse_candidat', 'Adresse complète', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('ville_residence', 'Ville de résidence', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('pays_residence', 'Pays de résidence', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('telephone', 'Téléphone WhatsApp', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|valid_email|matches[emailverif]');&#10;        $this-&gt;form_validation-&gt;set_rules('emailverif', 'Confirmation Email', 'required');&#10;        $this-&gt;form_validation-&gt;set_rules('engagement', 'Engagement', 'required');&#10;&#10;        if ($this-&gt;form_validation-&gt;run() == FALSE) {&#10;            // If validation fails or form is not submitted, redisplay the form&#10;            $this-&gt;form_data = new stdClass();&#10;            foreach ($this-&gt;input-&gt;post() as $key =&gt; $value) {&#10;                $this-&gt;form_data-&gt;$key = $value;&#10;            }&#10;            // For fields not in post, initialize them&#10;            $fields = ['type_etude', 'specialite', 'civilite', 'nom', 'prenom', 'epouse', 'nombre_enfant', 'datenaiss_jj', 'datenaiss_mm', 'datenaiss_yy', 'lieu_de_naissce', 'nationalite', 'paysorigine', 'region_dorigine', 'dept_dorigine', 'sexe', 'statu_matrimonial', 'langue', 'pays_residence', 'adresse_candidat', 'ville_residence', 'telephone', 'telephone2', 'email', 'emailverif', 'dernier_diplome', 'diplome_requis', 'specialite_requise', 'annee_optention_diplome', 'statut_prof', 'structure', 'adresse_structure', 'telephone_structure', 'email_structure', 'howDidYouKnewUs'];&#10;            foreach ($fields as $field) {&#10;                if (!isset($this-&gt;form_data-&gt;$field)) {&#10;                    $this-&gt;form_data-&gt;$field = '';&#10;                }&#10;            }&#10;&#10;            $this-&gt;template-&gt;layout('candidature', $data);&#10;        } else {&#10;            // If validation is successful, process the data&#10;            $candidat_data = array();&#10;            $fields = ['type_etude', 'specialite', 'civilite', 'nom', 'prenom', 'epouse', 'nombre_enfant', 'lieu_de_naissce', 'nationalite', 'paysorigine', 'region_dorigine', 'dept_dorigine', 'sexe', 'statu_matrimonial', 'langue', 'pays_residence', 'adresse_candidat', 'ville_residence', 'telephone', 'telephone2', 'email', 'dernier_diplome', 'diplome_requis', 'specialite_requise', 'annee_optention_diplome', 'statut_prof', 'structure', 'adresse_structure', 'telephone_structure', 'email_structure', 'howDidYouKnewUs'];&#10;            foreach ($fields as $field) {&#10;                $candidat_data[$field] = $this-&gt;input-&gt;post($field);&#10;            }&#10;            $candidat_data['date_naissance'] = $this-&gt;input-&gt;post('datenaiss_yy') . '-' . $this-&gt;input-&gt;post('datenaiss_mm') . '-' . $this-&gt;input-&gt;post('datenaiss_jj');&#10;&#10;            // Assuming you have a model method to insert data&#10;            $this-&gt;model-&gt;create($table, $candidat_data);&#10;&#10;            // Redirect to a success page&#10;            redirect('candidature/success'); // You need to create this success page and method&#10;        }&#10;    }&#10;&#10;    public function success() {&#10;        $this-&gt;template-&gt;layout('success_page'); // Create a success view&#10;    }&#10;&#10;    public function viewnumordre(){&#10;        $data=array();&#10;        $this-&gt;template-&gt;layout('numOrdreCandidature', $data);&#10;    }&#10;&#10;    public function initupdate() {&#10;        $this-&gt;form_data = new stdclass;&#10;        $this-&gt;form_data-&gt;numordre = '';&#10;        $this-&gt;form_data-&gt;telephone = '';&#10;        $submitname = &quot;modifier&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $data['action'] = site_url('candidature/verifinitupdate/');&#10;        $this-&gt;template-&gt;layout('firstformupdate', $data);&#10;    }&#10;&#10;    public function verifinitupdate() {&#10;        $table = 'candidats';&#10;        $submitname = &quot;modifier&quot;;&#10;        $data['submitname'] = $submitname;&#10;        $numordre = $this-&gt;input-&gt;post('numordre');&#10;        $phone = $this-&gt;input-&gt;post('telephone');&#10;        $candidature = $this-&gt;model-&gt;get_by_id($table, $numordre, 'ordre_candidature')-&gt;row();&#10;        if ($candidature == null || $candidature-&gt;telephone !== $phone) {&#10;            $this-&gt;form_data = new stdclass;&#10;            $this-&gt;form_data-&gt;numordre = $this-&gt;input-&gt;post('numordre');&#10;            $this-&gt;form_data-&gt;telephone = $this-&gt;input-&gt;post('telephone');&#10;            $data['action'] = site_url('candidature/verifinitupdate/');&#10;            $data['message'] = &quot;Vérifier vos informations&quot;;&#10;            $this-&gt;template-&gt;layout('firstformupdate', $data);&#10;        } else {&#10;            redirect('candidature/update/'.$numordre.&quot;/&quot;.$phone);&#10;        }&#10;    }&#10;&#10;    public function marquerdeposer($id_candidat) {&#10;        $this-&gt;load-&gt;model('impression_model', '', TRUE);&#10;        $candidat = array(&#10;            'a_depose' =&gt; true&#10;        );&#10;        $this-&gt;model-&gt;update(&quot;candidats&quot;, 'id', $id_candidat, $candidat);&#10;        redirect('liste');&#10;    }&#10;&#10;    public function update($numordre = 0, $phone = '') {&#10;        $table = 'candidats';&#10;        $submitname = &quot;modifier&quot;;&#10;        $data['submitname'] = $submitname;&#10;&#10;        $candidature = $this-&gt;model-&gt;get_by_id($table, $numordre, 'ordre_candidature')-&gt;row();&#10;&#10;        $data[&quot;specialites&quot;] = $this-&gt;model-&gt;list_all(&quot;specialite&quot;)-&gt;result();&#10;        $data[&quot;pays&quot;] = $this-&gt;model-&gt;list_all(&quot;pays&quot;)-&gt;result();&#10;        $data['action'] = site_url('candidature/update/'.$numordre.&quot;/&quot;.$phone);&#10;&#10;        $this-&gt;form_data = new stdclass;&#10;        $this-&gt;form_data-&gt;type_etude= $candidature-&gt;type_etude;&#10;        $this-&gt;form_data-&gt;specialite = $candidature-&gt;id_specialite;&#10;        $this-&gt;form_data-&gt;civilite = $candidature-&gt;civilite;&#10;        $this-&gt;form_data-&gt;nom = $candidature-&gt;nom;&#10;        $this-&gt;form_data-&gt;prenom = $candidature-&gt;prenom;&#10;        $this-&gt;form_data-&gt;epouse = $candidature-&gt;epouse;&#10;        $this-&gt;form_data-&gt;nombre_enfant = $candidature-&gt;nombre_enfant;&#10;        $date = explode(&quot;-&quot;, $candidature-&gt;date_naissance); //$candidature-&gt;date_naissance&#10;        $this-&gt;form_data-&gt;datenaiss_jj = $date[2];&#10;        $this-&gt;form_data-&gt;datenaiss_mm = $date[1];&#10;        $this-&gt;form_data-&gt;datenaiss_yy = $date[0];&#10;        $this-&gt;form_data-&gt;lieu_de_naissce = $candidature-&gt;lieu_de_naissce;&#10;        $this-&gt;form_data-&gt;nationalite = $candidature-&gt;nationalite;&#10;        $this-&gt;form_data-&gt;paysorigine = $candidature-&gt;paysorigine;&#10;        $this-&gt;form_data-&gt;region_dorigine = $candidature-&gt;region_dorigine;&#10;        $this-&gt;form_data-&gt;dept_dorigine = $candidature-&gt;dept_dorigine;&#10;        $this-&gt;form_data-&gt;sexe = $candidature-&gt;sexe;&#10;        $this-&gt;form_data-&gt;statu_matrimonial = $candidature-&gt;statu_matrimonial;&#10;        $this-&gt;form_data-&gt;nombre_enfant = $candidature-&gt;nombre_enfant;&#10;        $this-&gt;form_data-&gt;langue = $candidature-&gt;langue;&#10;        $this-&gt;form_data-&gt;pays_residence = $candidature-&gt;id_pays;&#10;        $this-&gt;form_data-&gt;adresse_candidat = $candidature-&gt;adresse_candidat;&#10;        $this-&gt;form_data-&gt;ville_residence = $candidature-&gt;ville_residence;&#10;        $this-&gt;form_data-&gt;telephone = $candidature-&gt;telephone;&#10;        $this-&gt;form_data-&gt;telephone2 = $candidature-&gt;telephone;&#10;        $this-&gt;form_data-&gt;email = $candidature-&gt;email;&#10;        $this-&gt;form_data-&gt;emailverif = $candidature-&gt;email;&#10;        $this-&gt;form_data-&gt;nombre_annee_etude_sup = $candidature-&gt;nombre_annee_etude_sup;&#10;        $this-&gt;form_data-&gt;dernier_diplome = $candidature-&gt;dernier_diplome;&#10;        $this-&gt;form_data-&gt;specialite_requise = $candidature-&gt;specialite_requise;&#10;        $this-&gt;form_data-&gt;diplome_requis = $candidature-&gt;diplome_requis;&#10;        $this-&gt;form_data-&gt;diplome_obtenu_a = $candidature-&gt;diplome_obtenu_a;&#10;        $this-&gt;form_data-&gt;annee_optention_diplome = $candidature-&gt;annee_optention_diplome;&#10;        $this-&gt;form_data-&gt;statut_prof = $candidature-&gt;statut_prof;&#10;        $this-&gt;form_data-&gt;structure = $candidature-&gt;structure;&#10;        $this-&gt;form_data-&gt;adresse_structure = $candidature-&gt;adresse_structure;&#10;        $this-&gt;form_data-&gt;telephone_structure = $candidature-&gt;telephone_structure;&#10;        $this-&gt;form_data-&gt;email_structure = $candidature-&gt;email_structure;&#10;        $this-&gt;form_data-&gt;howDidYouKnewUs = $candidature-&gt;howDidYouKnewUs;&#10;        //$this-&gt;form_data-&gt;accepter_condition              Pas besoin d'enregistrer cette variable&#10;        if (isset($_POST[$submitname])) {&#10;            // Validation rules for update - exclude current record from uniqueness check&#10;            $this-&gt;form_validation-&gt;set_rules('telephone', 'Numéro de téléphone principal', 'trim|required|is_unique[candidats.telephone.id.' . $candidature-&gt;id . ']|is_unique[candidats.telephone2.id.' . $candidature-&gt;id . ']');&#10;            $this-&gt;form_validation-&gt;set_rules('telephone2', 'Numéro de téléphone secondaire', 'trim|is_unique[candidats.telephone2.id.' . $candidature-&gt;id . ']|is_unique[candidats.telephone.id.' . $candidature-&gt;id . ']|differs[telephone]');&#10;            $this-&gt;form_validation-&gt;set_rules('email', 'Adresse e-mail', 'trim|required|valid_email|is_unique[candidats.email.id.' . $candidature-&gt;id . ']');&#10;            $this-&gt;form_validation-&gt;set_rules('emailverif', 'Confirmation de l\'adresse e-mail', 'trim|required|valid_email|matches[email]');&#10;&#10;            // Set custom error messages with clear and specific descriptions&#10;            $this-&gt;form_validation-&gt;set_message('required', 'Le champ %s est obligatoire.');&#10;            $this-&gt;form_validation-&gt;set_message('is_unique', 'Ce %s est déjà utilisé par un autre candidat. Veuillez en saisir un autre.');&#10;            $this-&gt;form_validation-&gt;set_message('matches', 'La confirmation de l\'adresse e-mail ne correspond pas à l\'adresse e-mail principale.');&#10;            $this-&gt;form_validation-&gt;set_message('differs', 'Le numéro de téléphone secondaire doit être différent du numéro principal.');&#10;            $this-&gt;form_validation-&gt;set_message('valid_email', 'Veuillez saisir une adresse e-mail valide.');&#10;&#10;            // ...existing code...&#10;            if ($this-&gt;form_validation-&gt;run() == FALSE) {&#10;                $this-&gt;form_data-&gt;specialite = $this-&gt;input-&gt;post('specialite');&#10;                $this-&gt;form_data-&gt;civilite = $this-&gt;input-&gt;post('civilite');&#10;                $this-&gt;form_data-&gt;nom = $this-&gt;input-&gt;post('nom');&#10;                $this-&gt;form_data-&gt;prenom = $this-&gt;input-&gt;post('prenom');&#10;                $this-&gt;form_data-&gt;epouse = $this-&gt;input-&gt;post('epouse');&#10;                $this-&gt;form_data-&gt;nombre_enfant = $this-&gt;input-&gt;post('nombre_enfant');&#10;                $this-&gt;form_data-&gt;datenaiss_jj = $this-&gt;input-&gt;post('datenaiss_jj');&#10;                $this-&gt;form_data-&gt;datenaiss_mm = $this-&gt;input-&gt;post('datenaiss_mm');&#10;                $this-&gt;form_data-&gt;datenaiss_yy = $this-&gt;input-&gt;post('datenaiss_yy');&#10;                $this-&gt;form_data-&gt;lieu_de_naissce = $this-&gt;input-&gt;post('lieu_de_naissce');&#10;                $this-&gt;form_data-&gt;nationalite = $this-&gt;input-&gt;post('nationalite');&#10;                $this-&gt;form_data-&gt;paysorigine = $this-&gt;input-&gt;post('paysorigine');&#10;                $this-&gt;form_data-&gt;region_dorigine = $this-&gt;input-&gt;post('region_dorigine');&#10;                $this-&gt;form_data-&gt;dept_dorigine = $this-&gt;input-&gt;post('dept_dorigine');&#10;                $this-&gt;form_data-&gt;statu_matrimonial = $this-&gt;input-&gt;post('statu_matrimonial');&#10;                $this-&gt;form_data-&gt;nombre_enfant = $this-&gt;input-&gt;post('nombre_enfant');&#10;                $this-&gt;form_data-&gt;langue = 'Français';&#10;                $this-&gt;form_data-&gt;pays_residence = $this-&gt;input-&gt;post('pays_residence');&#10;                $this-&gt;form_data-&gt;adresse_candidat = $this-&gt;input-&gt;post('adresse_candidat');&#10;                $this-&gt;form_data-&gt;ville_residence = $this-&gt;input-&gt;post('ville_residence');&#10;                $this-&gt;form_data-&gt;telephone = $this-&gt;input-&gt;post('telephone');&#10;                $this-&gt;form_data-&gt;telephone2 = $this-&gt;input-&gt;post('telephone2');&#10;                $this-&gt;form_data-&gt;email = $this-&gt;input-&gt;post('email');&#10;                $this-&gt;form_data-&gt;emailverif = $this-&gt;input-&gt;post('emailverif');&#10;                $this-&gt;form_data-&gt;nombre_annee_etude_sup = $this-&gt;input-&gt;post('nombre_annee_etude_sup');&#10;                $this-&gt;form_data-&gt;dernier_diplome = $this-&gt;input-&gt;post('dernier_diplome');&#10;                $this-&gt;form_data-&gt;specialite_requise = $this-&gt;input-&gt;post('specialite_requise');&#10;                $this-&gt;form_data-&gt;diplome_requis = $this-&gt;input-&gt;post('diplome_requis');&#10;                $this-&gt;form_data-&gt;diplome_obtenu_a = $this-&gt;input-&gt;post('diplome_obtenu_a');&#10;                $this-&gt;form_data-&gt;annee_optention_diplome = $this-&gt;input-&gt;post('annee_optention_diplome');&#10;                $this-&gt;form_data-&gt;statut_prof = $this-&gt;input-&gt;post('statut_prof');&#10;                $this-&gt;form_data-&gt;structure = $this-&gt;input-&gt;post('structure');&#10;                $this-&gt;form_data-&gt;adresse_structure = $this-&gt;input-&gt;post('adresse_structure');&#10;                $this-&gt;form_data-&gt;telephone_structure = $this-&gt;input-&gt;post('telephone_structure');&#10;                $this-&gt;form_data-&gt;email_structure = $this-&gt;input-&gt;post('email_structure');&#10;                $this-&gt;form_data-&gt;howDidYouKnewUs = $this-&gt;input-&gt;post('howDidYouKnewUs');&#10;                $data['message'] = 'Des erreurs ont été rencontrées lors de l\'enregistrement de votre fiche&lt;br/&gt; verifier vos informations et corriger les problèmes signalés';&#10;            } else {&#10;                $candidat = array(&#10;                    'civilite' =&gt; $this-&gt;input-&gt;post('civilite'),&#10;                    'type_etude' =&gt; $this-&gt;input-&gt;post('type_etude'),&#10;                    'nom' =&gt; $this-&gt;input-&gt;post('nom'),&#10;                    'prenom' =&gt; $this-&gt;input-&gt;post('prenom'),&#10;                    'epouse' =&gt; $this-&gt;input-&gt;post('epouse'),&#10;                    'nombre_enfant' =&gt; $this-&gt;input-&gt;post('nombre_enfant'),&#10;                    'date_naissance' =&gt; implode('-', array($this-&gt;input-&gt;post('datenaiss_yy'), $this-&gt;input-&gt;post('datenaiss_mm'), $this-&gt;input-&gt;post('datenaiss_jj'))),&#10;                    'lieu_de_naissce' =&gt; $this-&gt;input-&gt;post('lieu_de_naissce'),&#10;                    'nationalite' =&gt; $this-&gt;input-&gt;post('nationalite'),&#10;                    'paysorigine' =&gt; $this-&gt;input-&gt;post('paysorigine'),&#10;                    'region_dorigine' =&gt; $this-&gt;input-&gt;post('region_dorigine'),&#10;                    'dept_dorigine' =&gt; $this-&gt;input-&gt;post('dept_dorigine'),&#10;                    'statu_matrimonial' =&gt; $this-&gt;input-&gt;post('statu_matrimonial'),&#10;                    'adresse_candidat' =&gt; $this-&gt;input-&gt;post('adresse_candidat'),&#10;                    'telephone' =&gt; $this-&gt;input-&gt;post('telephone'),&#10;                    'telephone2' =&gt; $this-&gt;input-&gt;post('telephone2'),&#10;                    //'email' =&gt; $this-&gt;input-&gt;post('email'),&#10;                    'ville_residence' =&gt; $this-&gt;input-&gt;post('ville_residence'),&#10;                    'nombre_annee_etude_sup' =&gt; $this-&gt;input-&gt;post('nombre_annee_etude_sup'),&#10;                    'dernier_diplome' =&gt; $this-&gt;input-&gt;post('dernier_diplome'),&#10;                    'specialite_requise' =&gt; $this-&gt;input-&gt;post('specialite_requise'),&#10;                    'diplome_requis' =&gt; $this-&gt;input-&gt;post('diplome_requis'),&#10;                    'diplome_obtenu_a' =&gt; $this-&gt;input-&gt;post('diplome_obtenu_a'),&#10;                    'annee_optention_diplome' =&gt; $this-&gt;input-&gt;post('annee_optention_diplome'),&#10;                    'statut_prof' =&gt; $this-&gt;input-&gt;post('statut_prof'),&#10;                    'structure' =&gt; $this-&gt;input-&gt;post('structure'),&#10;                    'adresse_structure' =&gt; $this-&gt;input-&gt;post('adresse_structure'),&#10;                    'email_structure' =&gt; $this-&gt;input-&gt;post('email_structure'),&#10;                    'howDidYouKnewUs' =&gt; $this-&gt;input-&gt;post('howDidYouKnewUs'),&#10;                    'telephone_structure' =&gt; $this-&gt;input-&gt;post('telephone_structure'),&#10;                    'langue' =&gt; $this-&gt;input-&gt;post('langue'),&#10;                    'id_specialite' =&gt; $this-&gt;input-&gt;post('specialite'),&#10;                    'id_pays' =&gt; $this-&gt;input-&gt;post('pays_residence'),&#10;                    'pays_residence' =&gt; $this-&gt;model-&gt;get_by_id(&quot;pays&quot;, $this-&gt;input-&gt;post('pays_residence'), &quot;id&quot;)-&gt;row()-&gt;nom,&#10;                    //'ordre_candidature' =&gt; $numordre,&#10;                    'date_enregistrement' =&gt; date(&quot;Y-m-d H:i:s&quot;),&#10;                    'sexe' =&gt; ($this-&gt;input-&gt;post('civilite') === &quot;Monsieur&quot;) ? &quot;Homme&quot; : &quot;Femme&quot;,&#10;                    'accepter_condition' =&gt; true&#10;                );&#10;                //$this-&gt;model-&gt;save($table, $candidat);&#10;                $this-&gt;model-&gt;update($table, 'id', $candidature-&gt;id, $candidat);&#10;&#10;//                Creation de l'email a envoyé'&#10;                $email_setting['charset'] = 'utf-8';&#10;                $email_setting['mailtype'] = 'html';&#10;                $this-&gt;email-&gt;initialize($email_setting);&#10;                $this-&gt;email-&gt;from('info@pfinancespubliques.org', '[PSSFP] DEPOT de CANDIDATURE 12eme PROMOTION 2024/2025 ');&#10;                $this-&gt;email-&gt;to($this-&gt;input-&gt;post('email'));&#10;                $this-&gt;email-&gt;newline = &quot;\r\n&quot;;&#10;                $this-&gt;email-&gt;crlf = &quot;\n&quot;;&#10;                $specialite_candidat= $this-&gt;model-&gt;get_by_id2('specialite', $this-&gt;input-&gt;post('specialite'));&#10;                $this-&gt;email-&gt;subject('Enregistrement candidature N°'.$candidature-&gt;id);&#10;                $this-&gt;email-&gt;message('&#10;                    &lt;h2&gt;Confirmation de Candidature&lt;/h2&gt;&#10;&#10;                    &lt;p&gt;Cher(e) ' . $this-&gt;input-&gt;post('civilite') . ' ' . $this-&gt;input-&gt;post('nom') . ' ' . $this-&gt;input-&gt;post('prenom') . ',&lt;/p&gt;&#10;&#10;                    &lt;p&gt;Nous vous informons que votre candidature a bien été enregistrée avec les détails suivants :&lt;/p&gt;&#10;&#10;                    &lt;table&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Dossier N°&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $candidature-&gt;id . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;N° de téléphone&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('telephone') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Spécialité&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $specialite_candidat-&gt;nom . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Type de formation&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('type_etude') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Statut&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('statut_prof') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Administration d\'origine&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('structure') . '&lt;/td&gt;&lt;/tr&gt;&#10;                        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Nationalité&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;: ' . $this-&gt;input-&gt;post('nationalite') . '&lt;/td&gt;&lt;/tr&gt;&#10;                    &lt;/table&gt;&#10;&#10;                    &lt;h3&gt;Actions importantes :&lt;/h3&gt;&#10;                    &lt;ul&gt;&#10;                        &lt;li&gt;&lt;a href=&quot;' . site_url('impression/imprimer_fiche/' . $candidature-&gt;id) . '&quot;&gt;Télécharger votre fiche de candidature&lt;/a&gt;&lt;/li&gt;&#10;                        &lt;li&gt;&lt;a href=&quot;' . site_url('candidature/initupdate/' ) . '&quot;&gt;Modifier les informations de votre candidature&lt;/a&gt;&lt;/li&gt;&#10;                    &lt;/ul&gt;&#10;&#10;                    &lt;p&gt;Pour toute modification, veuillez utiliser les identifiants suivants :&lt;/p&gt;&#10;                    &lt;ul&gt;&#10;                        &lt;li&gt;&lt;strong&gt;Numéro d\'ordre&lt;/strong&gt; : ' . $candidature-&gt;id . '&lt;/li&gt;&#10;                        &lt;li&gt;&lt;strong&gt;N° de téléphone&lt;/strong&gt; : ' . $this-&gt;input-&gt;post('telephone') . '&lt;/li&gt;&#10;                    &lt;/ul&gt;&#10;&#10;                    &lt;hr&gt;&#10;&#10;                    &lt;footer style=&quot;color: #666; font-size: 0.9em;&quot;&gt;&#10;                        &lt;p&gt;PSSFP: B.P: 16 578 Yaoundé – Cameroun&lt;br&gt;&#10;                        Tel.: + (237) 697 921 332&lt;br&gt;&#10;                             (237) 677 257 272&lt;br&gt;&#10;                             (237) 671 171 808&lt;/p&gt;&#10;                    &lt;/footer&gt;&#10;                ');&#10;&#10;&#10;                $this-&gt;email-&gt;send();&#10;&#10;                $this-&gt;session-&gt;set_flashdata('succes', 'Modification de la Candidature enrégistrée avec succes, votre numéro d\'ordre a été envoyé à votre adresse mail!!');&#10;&#10;                $this-&gt;session-&gt;set_flashdata('id', $candidature-&gt;ordre_candidature);&#10;                $this-&gt;session-&gt;set_flashdata('numordre', $candidature-&gt;ordre_candidature);&#10;                $this-&gt;session-&gt;set_flashdata('telephone', $candidature-&gt;telephone);&#10;                $this-&gt;session-&gt;set_flashdata('email', $candidature-&gt;email);&#10;                redirect('candidature/viewnumordre');&#10;            }&#10;        }&#10;        $this-&gt;template-&gt;layout('candidature', $data);&#10;    }&#10;&#10;    public function initRecupOrdre(){&#10;        $data=array();&#10;        $this-&gt;template-&gt;layout('formEmailForNumOrdre', $data);&#10;    }&#10;&#10;    /**&#10;     * Reset form data by initializing all properties to empty values&#10;     */&#10;    private function reset_form_data() {&#10;        // Initialize form_data object if it doesn't exist&#10;        if (!isset($this-&gt;form_data)) {&#10;            $this-&gt;form_data = new stdClass();&#10;        }&#10;&#10;        // Reset all form fields to empty values&#10;        $this-&gt;form_data-&gt;specialite = '';&#10;        $this-&gt;form_data-&gt;type_etude = '';&#10;        $this-&gt;form_data-&gt;civilite = '';&#10;        $this-&gt;form_data-&gt;nom = '';&#10;        $this-&gt;form_data-&gt;prenom = '';&#10;        $this-&gt;form_data-&gt;epouse = '';&#10;        $this-&gt;form_data-&gt;nombre_enfant = '';&#10;        $this-&gt;form_data-&gt;datenaiss_jj = '';&#10;        $this-&gt;form_data-&gt;datenaiss_mm = '';&#10;        $this-&gt;form_data-&gt;datenaiss_yy = '';&#10;        $this-&gt;form_data-&gt;lieu_de_naissce = '';&#10;        $this-&gt;form_data-&gt;nationalite = '';&#10;        $this-&gt;form_data-&gt;paysorigine = '';&#10;        $this-&gt;form_data-&gt;region_dorigine = '';&#10;        $this-&gt;form_data-&gt;dept_dorigine = '';&#10;        $this-&gt;form_data-&gt;sexe = '';&#10;        $this-&gt;form_data-&gt;statu_matrimonial = '';&#10;        $this-&gt;form_data-&gt;langue = '';&#10;        $this-&gt;form_data-&gt;pays_residence = '';&#10;        $this-&gt;form_data-&gt;adresse_candidat = '';&#10;        $this-&gt;form_data-&gt;ville_residence = '';&#10;        $this-&gt;form_data-&gt;telephone = '';&#10;        $this-&gt;form_data-&gt;telephone2 = '';&#10;        $this-&gt;form_data-&gt;email = '';&#10;        $this-&gt;form_data-&gt;emailverif = '';&#10;        $this-&gt;form_data-&gt;nombre_annee_etude_sup = '';&#10;        $this-&gt;form_data-&gt;dernier_diplome = '';&#10;        $this-&gt;form_data-&gt;specialite_requise = '';&#10;        $this-&gt;form_data-&gt;diplome_requis = '';&#10;        $this-&gt;form_data-&gt;diplome_obtenu_a = '';&#10;        $this-&gt;form_data-&gt;annee_optention_diplome = '';&#10;        $this-&gt;form_data-&gt;statut_prof = '';&#10;        $this-&gt;form_data-&gt;structure = '';&#10;        $this-&gt;form_data-&gt;adresse_structure = '';&#10;        $this-&gt;form_data-&gt;telephone_structure = '';&#10;        $this-&gt;form_data-&gt;email_structure = '';&#10;        $this-&gt;form_data-&gt;howDidYouKnewUs = '';&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/application/views/success_page.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/application/views/success_page.php" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Candidature Soumise avec Succès&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?= base_url() ?&gt;resources/css/modern-form.css&quot;&gt;&#10;    &lt;style&gt;&#10;        .success-container {&#10;            text-align: center;&#10;            padding: 40px;&#10;            border-radius: 8px;&#10;            background-color: #fff;&#10;            box-shadow: 0 4px 8px rgba(0,0,0,0.1);&#10;            margin: 40px auto;&#10;            max-width: 600px;&#10;        }&#10;        .success-icon {&#10;            font-size: 48px;&#10;            color: #28a745;&#10;        }&#10;        .success-title {&#10;            font-size: 24px;&#10;            margin-top: 20px;&#10;            color: #333;&#10;        }&#10;        .success-message {&#10;            font-size: 16px;&#10;            color: #555;&#10;            margin-top: 10px;&#10;        }&#10;        .success-actions {&#10;            margin-top: 30px;&#10;        }&#10;        .btn {&#10;            padding: 10px 20px;&#10;            border-radius: 5px;&#10;            text-decoration: none;&#10;            color: #fff;&#10;            font-weight: bold;&#10;            margin: 0 10px;&#10;        }&#10;        .btn-primary {&#10;            background-color: #007bff;&#10;        }&#10;        .btn-secondary {&#10;            background-color: #6c757d;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;success-container&quot;&gt;&#10;            &lt;div class=&quot;success-icon&quot;&gt;&#10;                &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;h1 class=&quot;success-title&quot;&gt;Candidature soumise avec succès !&lt;/h1&gt;&#10;            &lt;p class=&quot;success-message&quot;&gt;&#10;                Merci d'avoir soumis votre candidature. Un email de confirmation vous a été envoyé avec les détails de votre inscription.&#10;            &lt;/p&gt;&#10;            &lt;div class=&quot;success-actions&quot;&gt;&#10;                &lt;a href=&quot;&lt;?= site_url('candidature') ?&gt;&quot; class=&quot;btn btn-primary&quot;&gt;Retour à l'accueil&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/resources/js/modern-form.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/resources/js/modern-form.js" />
              <option name="originalContent" value="/**&#10; * Enhanced Modern Form JavaScript - Fixed Multi-Step Navigation&#10; * Advanced UX features for the candidature form&#10; */&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    // Form elements and state&#10;    const formSections = document.querySelectorAll('.form-section');&#10;    const progressSteps = document.querySelectorAll('.progress-step');&#10;    const form = document.getElementById('candidatureForm');&#10;    let currentSection = 0;&#10;&#10;    // Initialize form&#10;    initializeForm();&#10;&#10;    function initializeForm() {&#10;        setupProgressBar();&#10;        setupSectionNavigation();&#10;        setupFormValidation();&#10;        setupConditionalFields();&#10;        setupAutoSave();&#10;        setupFormEnhancements();&#10;        setupFormSubmission(); // Added form submission handling&#10;        showSection(0);&#10;&#10;        // Initial button state update after everything is loaded&#10;        setTimeout(() =&gt; {&#10;            updateCurrentSectionNavigationButtons();&#10;        }, 100);&#10;&#10;        console.log('Form initialized with', formSections.length, 'sections');&#10;    }&#10;&#10;    // Progress bar and section management&#10;    function setupProgressBar() {&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.addEventListener('click', () =&gt; {&#10;                console.log('Progress step clicked:', index);&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    navigateToSection(index);&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    function showSection(sectionIndex) {&#10;        console.log('Showing section:', sectionIndex);&#10;&#10;        // Hide all sections and remove active class&#10;        formSections.forEach((section, index) =&gt; {&#10;            section.style.display = 'none';&#10;            section.classList.remove('active');&#10;        });&#10;&#10;        // Show the target section and add active class&#10;        if (formSections[sectionIndex]) {&#10;            formSections[sectionIndex].style.display = 'block'; // Explicitly set to block&#10;            formSections[sectionIndex].classList.add('active');&#10;            currentSection = sectionIndex;&#10;        } else {&#10;            console.error('Section index out of bounds:', sectionIndex);&#10;            return;&#10;        }&#10;&#10;        updateProgress(sectionIndex);&#10;&#10;        // Show/hide only the submit button on last section, keep navigation always visible&#10;        const submitBtn = document.querySelector('.form-actions .btn-success, .form-actions button[type=&quot;submit&quot;]');&#10;        if (submitBtn) {&#10;            if (sectionIndex === formSections.length - 1) {&#10;                submitBtn.style.display = '';&#10;            } else {&#10;                submitBtn.style.display = 'none';&#10;            }&#10;        }&#10;        // Always show form-actions (navigation)&#10;        const formActions = document.querySelector('.form-actions');&#10;        if (formActions) {&#10;            formActions.style.display = '';&#10;        }&#10;&#10;        updateCurrentSectionNavigationButtons();&#10;    }&#10;&#10;    function updateProgress(step) {&#10;        progressSteps.forEach((progressStep, index) =&gt; {&#10;            progressStep.classList.remove('active', 'completed');&#10;&#10;            if (index &lt; step) {&#10;                progressStep.classList.add('completed');&#10;            } else if (index === step) {&#10;                progressStep.classList.add('active');&#10;            }&#10;        });&#10;    }&#10;&#10;    function navigateToSection(targetSection) {&#10;        if (targetSection &gt;= 0 &amp;&amp; targetSection &lt; formSections.length) {&#10;            showSection(targetSection);&#10;        }&#10;    }&#10;&#10;    // Added function to properly handle form submission&#10;    function setupFormSubmission() {&#10;        // Get the form and submit button&#10;        const form = document.getElementById('candidatureForm');&#10;        const submitBtn = document.querySelector('.btn-success[type=&quot;submit&quot;]');&#10;&#10;        if (form &amp;&amp; submitBtn) {&#10;            // Remove any previous listeners first to avoid duplicates&#10;            submitBtn.removeEventListener('click', handleFormSubmit);&#10;&#10;            form.addEventListener('submit', function(e) {&#10;                // Allow normal form submission (don't prevent default)&#10;                // Allow normal form submission (don't prevent default)&#10;&#10;&#10;                // Optional: Add loading state to submit button&#10;                if (submitBtn) {&#10;                    submitBtn.disabled = true;&#10;                    submitBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Traitement en cours...';&#10;                }&#10;&#10;                // Form will submit normally&#10;        const requiredFields = form.querySelectorAll('[required]');&#10;&#10;            }&#10;        });&#10;&#10;        return isValid;&#10;    }&#10;&#10;    // Section navigation&#10;    function setupSectionNavigation() {&#10;        formSections.forEach((section, index) =&gt; {&#10;            // Remove existing navigation if any&#10;            const existingNav = section.querySelector('.form-navigation');&#10;            if (existingNav) {&#10;                existingNav.remove();&#10;            }&#10;&#10;            // Skip navigation for review section - it will be handled by review-form.js&#10;            if (section.id === 'review-section') {&#10;                return;&#10;            }&#10;&#10;            // Create navigation container&#10;            const navContainer = document.createElement('div');&#10;            navContainer.className = 'form-navigation';&#10;&#10;            // Previous button&#10;            if (index &gt; 0) {&#10;                const prevButton = createButton('Précédent', 'btn btn-secondary', () =&gt; {&#10;                    console.log('Previous button clicked from section:', index);&#10;                    navigateToSection(index - 1);&#10;                });&#10;                prevButton.innerHTML = '&lt;i class=&quot;fas fa-arrow-left&quot;&gt;&lt;/i&gt; &lt;span&gt;Précédent&lt;/span&gt;';&#10;                navContainer.appendChild(prevButton);&#10;            }&#10;&#10;            // Next button - check if this is the last regular section (before review)&#10;            const isLastRegularSection = index === formSections.length - 2 &amp;&amp; formSections[formSections.length - 1].id === 'review-section';&#10;&#10;            if (index &lt; formSections.length - 1 &amp;&amp; !isLastRegularSection) {&#10;                const nextButton = createButton('Suivant', 'btn btn-primary', () =&gt; {&#10;                    console.log('Next button clicked from section:', index);&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        navigateToSection(index + 1);&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                nextButton.innerHTML = '&lt;span&gt;Suivant&lt;/span&gt; &lt;i class=&quot;fas fa-arrow-right&quot;&gt;&lt;/i&gt;';&#10;                nextButton.setAttribute('data-button-type', 'next');&#10;                navContainer.appendChild(nextButton);&#10;            } else if (isLastRegularSection) {&#10;                // This will be handled by review-form.js&#10;                const reviewButton = createButton('Vérifier ma candidature', 'btn btn-primary', () =&gt; {&#10;                    console.log('Review button clicked from section:', index);&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        // Trigger review section navigation&#10;                        window.dispatchEvent(new CustomEvent('navigateToReview', { detail: { fromSection: index } }));&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                reviewButton.innerHTML = '&lt;span&gt;Vérifier ma candidature&lt;/span&gt; &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;';&#10;                reviewButton.setAttribute('data-button-type', 'review');&#10;                navContainer.appendChild(reviewButton);&#10;            }&#10;&#10;            section.appendChild(navContainer);&#10;        });&#10;    }&#10;&#10;    function createButton(text, className, onClick) {&#10;        const button = document.createElement('button');&#10;        button.type = 'button'; // Important: prevent form submission&#10;        // button.textContent = text; // This will be set by innerHTML&#10;        button.className = className;&#10;        button.addEventListener('click', (e) =&gt; {&#10;            e.preventDefault(); // Prevent any default behavior&#10;            onClick();&#10;        });&#10;        return button;&#10;    }&#10;&#10;    function updateNavigationButtons(sectionIndex) {&#10;        const navigation = formSections[sectionIndex]?.querySelector('.form-navigation');&#10;        if (!navigation) return;&#10;&#10;        const nextBtn = navigation.querySelector('.btn-primary');&#10;&#10;        // Update button states based on validation&#10;        if (nextBtn) {&#10;            const isValid = validateSection(sectionIndex, false);&#10;            console.log('----- &gt;Section', sectionIndex, 'validation state:', isValid);&#10;            nextBtn.disabled = !isValid;&#10;            nextBtn.classList.toggle('loading', false);&#10;        }&#10;    }&#10;&#10;    // New function to update current section's navigation buttons&#10;    function updateCurrentSectionNavigationButtons() {&#10;        updateNavigationButtons(currentSection);&#10;    }&#10;&#10;    // Enhanced validation&#10;    function setupFormValidation() {&#10;        // Real-time validation with comprehensive event handling&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;        inputs.forEach(input =&gt; {&#10;            // Validate on blur&#10;            input.addEventListener('blur', () =&gt; {&#10;                validateField(input);&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;&#10;            // Clear errors and update on input (typing)&#10;            input.addEventListener('input', () =&gt; {&#10;                clearFieldError(input);&#10;                saveFormData();&#10;                clearTimeout(input.validationTimeout);&#10;                input.validationTimeout = setTimeout(() =&gt; {&#10;                    validateField(input, false);&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 300);&#10;            });&#10;&#10;            // Immediate validation on keyup for instant feedback&#10;            input.addEventListener('keyup', () =&gt; {&#10;                clearTimeout(input.keyupTimeout);&#10;                input.keyupTimeout = setTimeout(() =&gt; {&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 100);&#10;            });&#10;&#10;            // Always update on change for all input types (select, radio, checkbox, text, etc.)&#10;            input.addEventListener('change', () =&gt; {&#10;                validateField(input);&#10;                saveFormData();&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;        });&#10;&#10;        // Form submission - only allow if on last section&#10;        form.addEventListener('submit', handleFormSubmit);&#10;&#10;        // Additional global form change listener as fallback&#10;        form.addEventListener('change', () =&gt; {&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        });&#10;&#10;        // On DOM ready, after autofill, update button state&#10;        window.addEventListener('pageshow', updateCurrentSectionNavigationButtons);&#10;        window.addEventListener('load', updateCurrentSectionNavigationButtons);&#10;    }&#10;&#10;    function validateSection(sectionIndex, showErrors = true) {&#10;        const section = formSections[sectionIndex];&#10;        if (!section) return true;&#10;&#10;        const requiredFields = section.querySelectorAll('input[required], select[required], textarea[required]');&#10;        let isValid = true;&#10;&#10;        requiredFields.forEach(field =&gt; {&#10;            // Proper null check before accessing style property&#10;            if (!field) return;&#10;&#10;            // Skip hidden fields - check both the field and its container&#10;            const isFieldHidden = field.style.display === 'none';&#10;            const formGroup = field.closest('.form-group');&#10;            const isContainerHidden = formGroup &amp;&amp; formGroup.style.display === 'none';&#10;&#10;            if (isFieldHidden || isContainerHidden) {&#10;                return;&#10;            }&#10;&#10;            if (!validateField(field, showErrors)) {&#10;                isValid = false;&#10;            }&#10;        });&#10;&#10;        // Custom validations&#10;        isValid = performCustomValidations(section, showErrors) &amp;&amp; isValid;&#10;&#10;        console.log('Section', sectionIndex, 'validation result:', isValid);&#10;        return isValid;&#10;    }&#10;&#10;    function validateField(field, showErrors = true) {&#10;        const value = field.value.trim();&#10;        const isRequired = field.hasAttribute('required');&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        clearFieldError(field);&#10;&#10;        // Skip validation for hidden fields&#10;        if (field.style.display === 'none' || (field.closest('.form-group') &amp;&amp; field.closest('.form-group').style.display === 'none')) {&#10;            return true;&#10;        }&#10;&#10;        // Special handling for radio buttons&#10;        if (field.type === 'radio' &amp;&amp; isRequired) {&#10;            const radioGroup = form.querySelectorAll(`input[name=&quot;${field.name}&quot;]`);&#10;            const isChecked = Array.from(radioGroup).some(radio =&gt; radio.checked);&#10;            if (!isChecked) {&#10;                if (showErrors) {&#10;                    const radioContainer = field.closest('.radio-group');&#10;                    showFieldError(radioContainer || field, 'Veuillez sélectionner une option');&#10;                }&#10;                isValid = false;&#10;            }&#10;            return isValid; // Return early for radio buttons&#10;        }&#10;&#10;        // Required field validation for non-radio fields&#10;        if (isRequired &amp;&amp; !value) {&#10;            if (showErrors) {&#10;                showFieldError(field, 'Ce champ est obligatoire');&#10;            }&#10;            isValid = false;&#10;        }&#10;&#10;        // Email validation&#10;        if (field.type === 'email' &amp;&amp; value) {&#10;            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;            if (!emailRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer une adresse email valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Phone validation&#10;        if (field.type === 'tel' &amp;&amp; field.name.includes('telephone') &amp;&amp; value) {&#10;            const phoneRegex = /^[0-9+\-\s()]{10,}$/;&#10;            if (!phoneRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer un numéro de téléphone valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Update field appearance&#10;        field.classList.toggle('is-invalid', !isValid);&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function performCustomValidations(section, showErrors = true) {&#10;        let isValid = true;&#10;&#10;        // Email confirmation validation&#10;        const email = section.querySelector('#email');&#10;        const emailVerif = section.querySelector('#emailverif');&#10;        if (email &amp;&amp; emailVerif &amp;&amp; email.value &amp;&amp; emailVerif.value) {&#10;            if (email.value !== emailVerif.value) {&#10;                if (showErrors) {&#10;                    showFieldError(emailVerif, 'Les adresses email ne correspondent pas');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Date validation&#10;        const daySelect = section.querySelector('#datenaiss_jj');&#10;        const monthSelect = section.querySelector('#datenaiss_mm');&#10;        const yearSelect = section.querySelector('#datenaiss_yy');&#10;&#10;        if (daySelect &amp;&amp; monthSelect &amp;&amp; yearSelect) {&#10;            const day = parseInt(daySelect.value);&#10;            const month = parseInt(monthSelect.value);&#10;            const year = parseInt(yearSelect.value);&#10;&#10;            if (day &amp;&amp; month &amp;&amp; year) {&#10;                const date = new Date(year, month - 1, day);&#10;                const today = new Date();&#10;                const age = today.getFullYear() - year;&#10;&#10;                if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {&#10;                    if (showErrors) {&#10;                        showFieldError(daySelect, 'Date invalide');&#10;                    }&#10;                    isValid = false;&#10;                } else if (age &lt; 18 || age &gt; 65) {&#10;                    if (showErrors) {&#10;                        showFieldError(yearSelect, 'L\'âge doit être entre 18 et 65 ans');&#10;                    }&#10;                    isValid = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function showFieldError(field, message) {&#10;        clearFieldError(field);&#10;&#10;        const errorDiv = document.createElement('div');&#10;        errorDiv.className = 'form-error';&#10;        errorDiv.textContent = message;&#10;&#10;        // Handle radio group errors differently&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            field.appendChild(errorDiv);&#10;        } else {&#10;            field.parentNode.appendChild(errorDiv);&#10;            field.classList.add('is-invalid');&#10;        }&#10;    }&#10;&#10;    function clearFieldError(field) {&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            const existingError = field.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;        } else {&#10;            const existingError = field.parentNode.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;            field.classList.remove('is-invalid');&#10;        }&#10;    }&#10;&#10;    function showValidationErrors(section) {&#10;        const errors = section.querySelectorAll('.form-error');&#10;        if (errors.length &gt; 0) {&#10;            errors[0].scrollIntoView({&#10;                behavior: 'smooth',&#10;                block: 'center'&#10;            });&#10;        }&#10;    }&#10;&#10;    function validateAllPreviousSections(targetSection) {&#10;        for (let i = 0; i &lt; targetSection; i++) {&#10;            if (!validateSection(i, false)) {&#10;                return false;&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // Conditional fields logic&#10;    function setupConditionalFields() {&#10;        const statutProfSelect = document.getElementById('statut');&#10;        const employerFields = document.querySelectorAll('.employer-field');&#10;&#10;        function toggleEmployerFields() {&#10;            const selectedStatus = statutProfSelect?.value;&#10;            const showFields = ['Fonctionnaire', 'Travailleur privé'].includes(selectedStatus);&#10;&#10;            employerFields.forEach(field =&gt; {&#10;                field.style.display = showFields ? 'block' : 'none';&#10;                field.classList.toggle('active', showFields);&#10;&#10;                const inputs = field.querySelectorAll('input');&#10;                inputs.forEach(input =&gt; {&#10;                    if (showFields) {&#10;                        input.setAttribute('required', 'required');&#10;                    } else {&#10;                        input.removeAttribute('required');&#10;                        clearFieldError(input);&#10;                    }&#10;                });&#10;            });&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (statutProfSelect) {&#10;            statutProfSelect.addEventListener('change', toggleEmployerFields);&#10;            toggleEmployerFields(); // Initial state&#10;        }&#10;&#10;        // Spouse name field logic&#10;        const civiliteSelect = document.getElementById('civilite');&#10;        const epouseField = document.getElementById('epouse');&#10;&#10;        function toggleSpouseField() {&#10;            const civilite = civiliteSelect?.value;&#10;            if (epouseField) {&#10;                epouseField.style.display = (civilite === &quot;Monsieur&quot;) ? &quot;none&quot; : &quot;block&quot;;&#10;                if (civilite === &quot;Monsieur&quot;) {&#10;                    epouseField.removeAttribute('required');&#10;                } else {&#10;                    // Don't make it required automatically&#10;                }&#10;            }&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (civiliteSelect) {&#10;            civiliteSelect.addEventListener('change', toggleSpouseField);&#10;            toggleSpouseField(); // Initial state&#10;        }&#10;    }&#10;&#10;    // Auto-save functionality&#10;    function setupAutoSave() {&#10;        const STORAGE_KEY = 'candidature_form_data';&#10;&#10;        // Load saved data&#10;        loadFormData();&#10;&#10;        // Save periodically&#10;        setInterval(saveFormData, 30000); // Every 30 seconds&#10;&#10;        // Save on page unload&#10;        window.addEventListener('beforeunload', saveFormData);&#10;    }&#10;&#10;    function saveFormData() {&#10;        const data = {};&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;        inputs.forEach(input =&gt; {&#10;            if (input.type === 'radio' || input.type === 'checkbox') {&#10;                if (input.checked) {&#10;                    data[input.name] = input.value;&#10;                }&#10;            } else {&#10;                data[input.name] = input.value;&#10;            }&#10;        });&#10;&#10;        localStorage.setItem('candidature_form_data', JSON.stringify(data));&#10;        showAutoSaveIndicator();&#10;    }&#10;&#10;    function loadFormData() {&#10;        const savedData = localStorage.getItem('candidature_form_data');&#10;        if (!savedData) return;&#10;&#10;        try {&#10;            const data = JSON.parse(savedData);&#10;            const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;            inputs.forEach(input =&gt; {&#10;                if (data[input.name] !== undefined) {&#10;                    if (input.type === 'radio' || input.type === 'checkbox') {&#10;                        input.checked = data[input.name] === input.value;&#10;                    } else {&#10;                        input.value = data[input.name];&#10;                    }&#10;                }&#10;            });&#10;        } catch (e) {&#10;            console.error('Error loading saved form data:', e);&#10;        }&#10;    }&#10;&#10;    function showAutoSaveIndicator() {&#10;        // Create or update auto-save indicator&#10;        let indicator = document.getElementById('autosave-indicator');&#10;        if (!indicator) {&#10;            indicator = document.createElement('div');&#10;            indicator.id = 'autosave-indicator';&#10;            indicator.style.cssText = `&#10;                position: fixed;&#10;                bottom: 20px;&#10;                right: 20px;&#10;                background: var(--success-color);&#10;                color: white;&#10;                padding: 8px 16px;&#10;                border-radius: 20px;&#10;                font-size: 0.8rem;&#10;                opacity: 0;&#10;                transition: opacity 0.3s;&#10;                z-index: 1000;&#10;            `;&#10;            document.body.appendChild(indicator);&#10;        }&#10;&#10;        indicator.textContent = 'Sauvegarde automatique ✓';&#10;        indicator.style.opacity = '1';&#10;&#10;        setTimeout(() =&gt; {&#10;            indicator.style.opacity = '0';&#10;        }, 2000);&#10;    }&#10;&#10;    // Additional form enhancements&#10;    function setupFormEnhancements() {&#10;        // Smooth focus transitions&#10;        const inputs = form.querySelectorAll('.formbold-form-input');&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('focus', function() {&#10;                this.parentNode.classList.add('focused');&#10;            });&#10;&#10;            input.addEventListener('blur', function() {&#10;                this.parentNode.classList.remove('focused');&#10;            });&#10;        });&#10;&#10;        // Progress bar click navigation&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.style.cursor = 'pointer';&#10;            step.addEventListener('mouseenter', function() {&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    this.style.transform = 'scale(1.05)';&#10;                }&#10;            });&#10;&#10;            step.addEventListener('mouseleave', function() {&#10;                this.style.transform = '';&#10;            });&#10;        });&#10;&#10;        // Keyboard navigation&#10;        document.addEventListener('keydown', function(e) {&#10;            if (e.ctrlKey || e.metaKey) {&#10;                switch(e.key) {&#10;                    case 'ArrowLeft':&#10;                        e.preventDefault();&#10;                        if (currentSection &gt; 0) {&#10;                            navigateToSection(currentSection - 1);&#10;                        }&#10;                        break;&#10;                    case 'ArrowRight':&#10;                        e.preventDefault();&#10;                        if (currentSection &lt; formSections.length - 1 &amp;&amp; validateSection(currentSection, false)) {&#10;                            navigateToSection(currentSection + 1);&#10;                        }&#10;                        break;&#10;                }&#10;            }&#10;        });&#10;&#10;        // Fix dropdown selection visibility issues&#10;        setupDropdownVisibilityFix();&#10;&#10;        // Form completion progress&#10;        updateCompletionProgress();&#10;        form.addEventListener('input', updateCompletionProgress);&#10;        form.addEventListener('change', updateCompletionProgress);&#10;    }&#10;&#10;    // Fix dropdown selection visibility issues&#10;    function setupDropdownVisibilityFix() {&#10;        const selectElements = document.querySelectorAll('select.formbold-form-input');&#10;&#10;        selectElements.forEach(select =&gt; {&#10;            // Force initial style application&#10;            forceSelectVisibility(select);&#10;&#10;            // Handle change events&#10;            select.addEventListener('change', function() {&#10;                forceSelectVisibility(this);&#10;                // Force re-render by briefly changing display&#10;                const originalDisplay = this.style.display;&#10;                this.style.display = 'none';&#10;                this.offsetHeight; // Trigger reflow&#10;                this.style.display = originalDisplay || 'block';&#10;            });&#10;&#10;            // Handle focus/blur events&#10;            select.addEventListener('focus', function() {&#10;                forceSelectVisibility(this);&#10;            });&#10;&#10;            select.addEventListener('blur', function() {&#10;                setTimeout(() =&gt; forceSelectVisibility(this), 10);&#10;            });&#10;        });&#10;    }&#10;&#10;    function forceSelectVisibility(selectElement) {&#10;        if (!selectElement) return;&#10;&#10;        // Force style properties&#10;        selectElement.style.color = '#2d3748';&#10;        selectElement.style.backgroundColor = '#ffffff';&#10;        selectElement.style.opacity = '1';&#10;&#10;        // Handle selected state&#10;        if (selectElement.value &amp;&amp; selectElement.value !== '') {&#10;            selectElement.style.fontWeight = '500';&#10;            selectElement.setAttribute('data-has-value', 'true');&#10;        } else {&#10;            selectElement.style.fontWeight = '400';&#10;            selectElement.removeAttribute('data-has-value');&#10;        }&#10;&#10;        // Force repaint&#10;        selectElement.offsetHeight;&#10;    }&#10;&#10;    // Apply fixes to all dropdowns on page load&#10;    function fixAllDropdowns() {&#10;        const allSelects = document.querySelectorAll('select.formbold-form-input');&#10;        allSelects.forEach(select =&gt; {&#10;            forceSelectVisibility(select);&#10;        });&#10;    }&#10;&#10;    function updateCompletionProgress() {&#10;        const allInputs = form.querySelectorAll('input[required], select[required], textarea[required]');&#10;        const filledInputs = Array.from(allInputs).filter(input =&gt; {&#10;            // Skip if input itself is hidden&#10;            if (input.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Check if parent form-group is hidden&#10;            const formGroup = input.closest('.form-group');&#10;            if (formGroup &amp;&amp; formGroup.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Special handling for radio buttons&#10;            if (input.type === 'radio') {&#10;                return form.querySelector(`input[name=&quot;${input.name}&quot;]:checked`);&#10;            }&#10;&#10;            return input.value.trim() !== '';&#10;        });&#10;&#10;        const progress = Math.round((filledInputs.length / allInputs.length) * 100);&#10;&#10;        // Update progress in header&#10;        let progressText = document.querySelector('.form-completion-progress');&#10;        if (!progressText) {&#10;            progressText = document.createElement('div');&#10;            progressText.className = 'form-completion-progress';&#10;            progressText.style.cssText = `&#10;                position: absolute;&#10;                top: 10px;&#10;                right: 20px;&#10;                background: rgba(255,255,255,0.2);&#10;                padding: 5px 12px;&#10;                border-radius: 15px;&#10;                font-size: 0.8rem;&#10;                z-index: 10;&#10;            `;&#10;            const formHeader = document.querySelector('.form-header');&#10;            if (formHeader) {&#10;                formHeader.appendChild(progressText);&#10;            }&#10;        }&#10;&#10;        if (progressText) {&#10;            progressText.textContent = `${progress}% complété`;&#10;        }&#10;    }&#10;&#10;    // We don't need this function anymore as we want normal form submission&#10;    function handleFormSubmit(e) {&#10;        // Do nothing, allow default form submission&#10;        console.log('Submit button clicked');&#10;    }&#10;&#10;    // Public API&#10;    window.formFunctions = {&#10;        navigateToSection,&#10;        validateSection,&#10;        saveFormData,&#10;        validateAllSections: () =&gt; {&#10;            for (let i = 0; i &lt; formSections.length - 1; i++) {&#10;                if (!validateSection(i, false)) {&#10;                    return false;&#10;                }&#10;            }&#10;            return true;&#10;        },&#10;        getCurrentSection: () =&gt; currentSection,&#10;        getTotalSections: () =&gt; formSections.length&#10;    };&#10;});&#10;" />
              <option name="updatedContent" value="/**&#10; * Enhanced Modern Form JavaScript - Fixed Multi-Step Navigation&#10; * Advanced UX features for the candidature form&#10; */&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    // Form elements and state&#10;    const formSections = document.querySelectorAll('.form-section');&#10;    const progressSteps = document.querySelectorAll('.progress-step');&#10;    const form = document.getElementById('candidatureForm');&#10;    let currentSection = 0;&#10;&#10;    // Initialize form&#10;    initializeForm();&#10;&#10;    function initializeForm() {&#10;        setupProgressBar();&#10;        setupSectionNavigation();&#10;        setupFormValidation();&#10;        setupConditionalFields();&#10;        setupAutoSave();&#10;        setupFormEnhancements();&#10;        setupFormSubmission(); // Added form submission handling&#10;        showSection(0);&#10;&#10;        // Initial button state update after everything is loaded&#10;        setTimeout(() =&gt; {&#10;            updateCurrentSectionNavigationButtons();&#10;        }, 100);&#10;&#10;        console.log('Form initialized with', formSections.length, 'sections');&#10;    }&#10;&#10;    // Progress bar and section management&#10;    function setupProgressBar() {&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.addEventListener('click', () =&gt; {&#10;                console.log('Progress step clicked:', index);&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    navigateToSection(index);&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    function showSection(sectionIndex) {&#10;        console.log('Showing section:', sectionIndex);&#10;&#10;        // Hide all sections and remove active class&#10;        formSections.forEach((section, index) =&gt; {&#10;            section.style.display = 'none';&#10;            section.classList.remove('active');&#10;        });&#10;&#10;        // Show the target section and add active class&#10;        if (formSections[sectionIndex]) {&#10;            formSections[sectionIndex].style.display = 'block'; // Explicitly set to block&#10;            formSections[sectionIndex].classList.add('active');&#10;            currentSection = sectionIndex;&#10;        } else {&#10;            console.error('Section index out of bounds:', sectionIndex);&#10;            return;&#10;        }&#10;&#10;        updateProgress(sectionIndex);&#10;&#10;        // Show/hide only the submit button on last section, keep navigation always visible&#10;        const submitBtn = document.querySelector('.form-actions .btn-success, .form-actions button[type=&quot;submit&quot;]');&#10;        if (submitBtn) {&#10;            if (sectionIndex === formSections.length - 1) {&#10;                submitBtn.style.display = '';&#10;            } else {&#10;                submitBtn.style.display = 'none';&#10;            }&#10;        }&#10;        // Always show form-actions (navigation)&#10;        const formActions = document.querySelector('.form-actions');&#10;        if (formActions) {&#10;            formActions.style.display = '';&#10;        }&#10;&#10;        updateCurrentSectionNavigationButtons();&#10;    }&#10;&#10;    function updateProgress(step) {&#10;        progressSteps.forEach((progressStep, index) =&gt; {&#10;            progressStep.classList.remove('active', 'completed');&#10;&#10;            if (index &lt; step) {&#10;                progressStep.classList.add('completed');&#10;            } else if (index === step) {&#10;                progressStep.classList.add('active');&#10;            }&#10;        });&#10;    }&#10;&#10;    function navigateToSection(targetSection) {&#10;        if (targetSection &gt;= 0 &amp;&amp; targetSection &lt; formSections.length) {&#10;            showSection(targetSection);&#10;        }&#10;    }&#10;&#10;    // Added function to properly handle form submission&#10;    function setupFormSubmission() {&#10;        // Get the form and submit button&#10;        const form = document.getElementById('candidatureForm');&#10;        const submitBtn = document.querySelector('.btn-success[type=&quot;submit&quot;]');&#10;        &#10;        if (form &amp;&amp; submitBtn) {&#10;            // Remove any previous event listeners that might be blocking submission&#10;            const clonedSubmitBtn = submitBtn.cloneNode(true);&#10;            submitBtn.parentNode.replaceChild(clonedSubmitBtn, submitBtn);&#10;            &#10;            // Add proper submit handler to the form itself&#10;            form.addEventListener('submit', function(e) {&#10;                // Don't prevent the default submission - this is crucial!&#10;                console.log('Form is being submitted...');&#10;                &#10;                // Store the original text to restore it if needed&#10;                const originalText = clonedSubmitBtn.innerHTML;&#10;                &#10;                // Add loading state to submit button&#10;                clonedSubmitBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Envoi en cours...';&#10;                &#10;                // Set a timeout to ensure the form can still submit if something goes wrong&#10;                setTimeout(function() {&#10;                    // This ensures the form submission completes even if there's a delay&#10;                    if (form.getAttribute('data-submitting') !== 'true') {&#10;                        form.setAttribute('data-submitting', 'true');&#10;                        form.submit();&#10;                    }&#10;                }, 1000);&#10;                &#10;                // Allow normal form submission&#10;                return true;&#10;            });&#10;            &#10;            // Clear any previously saved form data to avoid conflicts&#10;            try {&#10;                localStorage.removeItem('candidature_form_data');&#10;            } catch (e) {&#10;                console.log('Could not clear form data from localStorage');&#10;            }&#10;        }&#10;    }&#10;&#10;    // Function to validate all sections&#10;    function validateAllSections() {&#10;        let isValid = true;&#10;&#10;        // Get all required fields&#10;        const requiredFields = form.querySelectorAll('[required]');&#10;&#10;        // Check each required field&#10;        requiredFields.forEach(field =&gt; {&#10;            if (!field.value.trim()) {&#10;                isValid = false;&#10;                field.classList.add('error');&#10;            } else {&#10;                field.classList.remove('error');&#10;            }&#10;        });&#10;&#10;        return isValid;&#10;    }&#10;&#10;    // Section navigation&#10;    function setupSectionNavigation() {&#10;        formSections.forEach((section, index) =&gt; {&#10;            // Remove existing navigation if any&#10;            const existingNav = section.querySelector('.form-navigation');&#10;            if (existingNav) {&#10;                existingNav.remove();&#10;            }&#10;&#10;            // Skip navigation for review section - it will be handled by review-form.js&#10;            if (section.id === 'review-section') {&#10;                return;&#10;            }&#10;&#10;            // Create navigation container&#10;            const navContainer = document.createElement('div');&#10;            navContainer.className = 'form-navigation';&#10;&#10;            // Previous button&#10;            if (index &gt; 0) {&#10;                const prevButton = createButton('Précédent', 'btn btn-secondary', () =&gt; {&#10;                    console.log('Previous button clicked from section:', index);&#10;                    navigateToSection(index - 1);&#10;                });&#10;                prevButton.innerHTML = '&lt;i class=&quot;fas fa-arrow-left&quot;&gt;&lt;/i&gt; &lt;span&gt;Précédent&lt;/span&gt;';&#10;                navContainer.appendChild(prevButton);&#10;            }&#10;&#10;            // Next button - check if this is the last regular section (before review)&#10;            const isLastRegularSection = index === formSections.length - 2 &amp;&amp; formSections[formSections.length - 1].id === 'review-section';&#10;&#10;            if (index &lt; formSections.length - 1 &amp;&amp; !isLastRegularSection) {&#10;                const nextButton = createButton('Suivant', 'btn btn-primary', () =&gt; {&#10;                    console.log('Next button clicked from section:', index);&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        navigateToSection(index + 1);&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                nextButton.innerHTML = '&lt;span&gt;Suivant&lt;/span&gt; &lt;i class=&quot;fas fa-arrow-right&quot;&gt;&lt;/i&gt;';&#10;                nextButton.setAttribute('data-button-type', 'next');&#10;                navContainer.appendChild(nextButton);&#10;            } else if (isLastRegularSection) {&#10;                // This will be handled by review-form.js&#10;                const reviewButton = createButton('Vérifier ma candidature', 'btn btn-primary', () =&gt; {&#10;                    console.log('Review button clicked from section:', index);&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        // Trigger review section navigation&#10;                        window.dispatchEvent(new CustomEvent('navigateToReview', { detail: { fromSection: index } }));&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                reviewButton.innerHTML = '&lt;span&gt;Vérifier ma candidature&lt;/span&gt; &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;';&#10;                reviewButton.setAttribute('data-button-type', 'review');&#10;                navContainer.appendChild(reviewButton);&#10;            }&#10;&#10;            section.appendChild(navContainer);&#10;        });&#10;    }&#10;&#10;    function createButton(text, className, onClick) {&#10;        const button = document.createElement('button');&#10;        button.type = 'button'; // Important: prevent form submission&#10;        // button.textContent = text; // This will be set by innerHTML&#10;        button.className = className;&#10;        button.addEventListener('click', (e) =&gt; {&#10;            e.preventDefault(); // Prevent any default behavior&#10;            onClick();&#10;        });&#10;        return button;&#10;    }&#10;&#10;    function updateNavigationButtons(sectionIndex) {&#10;        const navigation = formSections[sectionIndex]?.querySelector('.form-navigation');&#10;        if (!navigation) return;&#10;&#10;        const nextBtn = navigation.querySelector('.btn-primary');&#10;&#10;        // Update button states based on validation&#10;        if (nextBtn) {&#10;            const isValid = validateSection(sectionIndex, false);&#10;            console.log('----- &gt;Section', sectionIndex, 'validation state:', isValid);&#10;            nextBtn.disabled = !isValid;&#10;            nextBtn.classList.toggle('loading', false);&#10;        }&#10;    }&#10;&#10;    // New function to update current section's navigation buttons&#10;    function updateCurrentSectionNavigationButtons() {&#10;        updateNavigationButtons(currentSection);&#10;    }&#10;&#10;    // Enhanced validation&#10;    function setupFormValidation() {&#10;        // Real-time validation with comprehensive event handling&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;        inputs.forEach(input =&gt; {&#10;            // Validate on blur&#10;            input.addEventListener('blur', () =&gt; {&#10;                validateField(input);&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;&#10;            // Clear errors and update on input (typing)&#10;            input.addEventListener('input', () =&gt; {&#10;                clearFieldError(input);&#10;                saveFormData();&#10;                clearTimeout(input.validationTimeout);&#10;                input.validationTimeout = setTimeout(() =&gt; {&#10;                    validateField(input, false);&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 300);&#10;            });&#10;&#10;            // Immediate validation on keyup for instant feedback&#10;            input.addEventListener('keyup', () =&gt; {&#10;                clearTimeout(input.keyupTimeout);&#10;                input.keyupTimeout = setTimeout(() =&gt; {&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 100);&#10;            });&#10;&#10;            // Always update on change for all input types (select, radio, checkbox, text, etc.)&#10;            input.addEventListener('change', () =&gt; {&#10;                validateField(input);&#10;                saveFormData();&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;        });&#10;&#10;        // Form submission - only allow if on last section&#10;        form.addEventListener('submit', handleFormSubmit);&#10;&#10;        // Additional global form change listener as fallback&#10;        form.addEventListener('change', () =&gt; {&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        });&#10;&#10;        // On DOM ready, after autofill, update button state&#10;        window.addEventListener('pageshow', updateCurrentSectionNavigationButtons);&#10;        window.addEventListener('load', updateCurrentSectionNavigationButtons);&#10;    }&#10;&#10;    function validateSection(sectionIndex, showErrors = true) {&#10;        const section = formSections[sectionIndex];&#10;        if (!section) return true;&#10;&#10;        const requiredFields = section.querySelectorAll('input[required], select[required], textarea[required]');&#10;        let isValid = true;&#10;&#10;        requiredFields.forEach(field =&gt; {&#10;            // Proper null check before accessing style property&#10;            if (!field) return;&#10;&#10;            // Skip hidden fields - check both the field and its container&#10;            const isFieldHidden = field.style.display === 'none';&#10;            const formGroup = field.closest('.form-group');&#10;            const isContainerHidden = formGroup &amp;&amp; formGroup.style.display === 'none';&#10;&#10;            if (isFieldHidden || isContainerHidden) {&#10;                return;&#10;            }&#10;&#10;            if (!validateField(field, showErrors)) {&#10;                isValid = false;&#10;            }&#10;        });&#10;&#10;        // Custom validations&#10;        isValid = performCustomValidations(section, showErrors) &amp;&amp; isValid;&#10;&#10;        console.log('Section', sectionIndex, 'validation result:', isValid);&#10;        return isValid;&#10;    }&#10;&#10;    function validateField(field, showErrors = true) {&#10;        const value = field.value.trim();&#10;        const isRequired = field.hasAttribute('required');&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        clearFieldError(field);&#10;&#10;        // Skip validation for hidden fields&#10;        if (field.style.display === 'none' || (field.closest('.form-group') &amp;&amp; field.closest('.form-group').style.display === 'none')) {&#10;            return true;&#10;        }&#10;&#10;        // Special handling for radio buttons&#10;        if (field.type === 'radio' &amp;&amp; isRequired) {&#10;            const radioGroup = form.querySelectorAll(`input[name=&quot;${field.name}&quot;]`);&#10;            const isChecked = Array.from(radioGroup).some(radio =&gt; radio.checked);&#10;            if (!isChecked) {&#10;                if (showErrors) {&#10;                    const radioContainer = field.closest('.radio-group');&#10;                    showFieldError(radioContainer || field, 'Veuillez sélectionner une option');&#10;                }&#10;                isValid = false;&#10;            }&#10;            return isValid; // Return early for radio buttons&#10;        }&#10;&#10;        // Required field validation for non-radio fields&#10;        if (isRequired &amp;&amp; !value) {&#10;            if (showErrors) {&#10;                showFieldError(field, 'Ce champ est obligatoire');&#10;            }&#10;            isValid = false;&#10;        }&#10;&#10;        // Email validation&#10;        if (field.type === 'email' &amp;&amp; value) {&#10;            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;            if (!emailRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer une adresse email valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Phone validation&#10;        if (field.type === 'tel' &amp;&amp; field.name.includes('telephone') &amp;&amp; value) {&#10;            const phoneRegex = /^[0-9+\-\s()]{10,}$/;&#10;            if (!phoneRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer un numéro de téléphone valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Update field appearance&#10;        field.classList.toggle('is-invalid', !isValid);&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function performCustomValidations(section, showErrors = true) {&#10;        let isValid = true;&#10;&#10;        // Email confirmation validation&#10;        const email = section.querySelector('#email');&#10;        const emailVerif = section.querySelector('#emailverif');&#10;        if (email &amp;&amp; emailVerif &amp;&amp; email.value &amp;&amp; emailVerif.value) {&#10;            if (email.value !== emailVerif.value) {&#10;                if (showErrors) {&#10;                    showFieldError(emailVerif, 'Les adresses email ne correspondent pas');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Date validation&#10;        const daySelect = section.querySelector('#datenaiss_jj');&#10;        const monthSelect = section.querySelector('#datenaiss_mm');&#10;        const yearSelect = section.querySelector('#datenaiss_yy');&#10;&#10;        if (daySelect &amp;&amp; monthSelect &amp;&amp; yearSelect) {&#10;            const day = parseInt(daySelect.value);&#10;            const month = parseInt(monthSelect.value);&#10;            const year = parseInt(yearSelect.value);&#10;&#10;            if (day &amp;&amp; month &amp;&amp; year) {&#10;                const date = new Date(year, month - 1, day);&#10;                const today = new Date();&#10;                const age = today.getFullYear() - year;&#10;&#10;                if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {&#10;                    if (showErrors) {&#10;                        showFieldError(daySelect, 'Date invalide');&#10;                    }&#10;                    isValid = false;&#10;                } else if (age &lt; 18 || age &gt; 65) {&#10;                    if (showErrors) {&#10;                        showFieldError(yearSelect, 'L\'âge doit être entre 18 et 65 ans');&#10;                    }&#10;                    isValid = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function showFieldError(field, message) {&#10;        clearFieldError(field);&#10;&#10;        const errorDiv = document.createElement('div');&#10;        errorDiv.className = 'form-error';&#10;        errorDiv.textContent = message;&#10;&#10;        // Handle radio group errors differently&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            field.appendChild(errorDiv);&#10;        } else {&#10;            field.parentNode.appendChild(errorDiv);&#10;            field.classList.add('is-invalid');&#10;        }&#10;    }&#10;&#10;    function clearFieldError(field) {&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            const existingError = field.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;        } else {&#10;            const existingError = field.parentNode.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;            field.classList.remove('is-invalid');&#10;        }&#10;    }&#10;&#10;    function showValidationErrors(section) {&#10;        const errors = section.querySelectorAll('.form-error');&#10;        if (errors.length &gt; 0) {&#10;            errors[0].scrollIntoView({&#10;                behavior: 'smooth',&#10;                block: 'center'&#10;            });&#10;        }&#10;    }&#10;&#10;    function validateAllPreviousSections(targetSection) {&#10;        for (let i = 0; i &lt; targetSection; i++) {&#10;            if (!validateSection(i, false)) {&#10;                return false;&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // Conditional fields logic&#10;    function setupConditionalFields() {&#10;        const statutProfSelect = document.getElementById('statut');&#10;        const employerFields = document.querySelectorAll('.employer-field');&#10;&#10;        function toggleEmployerFields() {&#10;            const selectedStatus = statutProfSelect?.value;&#10;            const showFields = ['Fonctionnaire', 'Travailleur privé'].includes(selectedStatus);&#10;&#10;            employerFields.forEach(field =&gt; {&#10;                field.style.display = showFields ? 'block' : 'none';&#10;                field.classList.toggle('active', showFields);&#10;&#10;                const inputs = field.querySelectorAll('input');&#10;                inputs.forEach(input =&gt; {&#10;                    if (showFields) {&#10;                        input.setAttribute('required', 'required');&#10;                    } else {&#10;                        input.removeAttribute('required');&#10;                        clearFieldError(input);&#10;                    }&#10;                });&#10;            });&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (statutProfSelect) {&#10;            statutProfSelect.addEventListener('change', toggleEmployerFields);&#10;            toggleEmployerFields(); // Initial state&#10;        }&#10;&#10;        // Spouse name field logic&#10;        const civiliteSelect = document.getElementById('civilite');&#10;        const epouseField = document.getElementById('epouse');&#10;&#10;        function toggleSpouseField() {&#10;            const civilite = civiliteSelect?.value;&#10;            if (epouseField) {&#10;                epouseField.style.display = (civilite === &quot;Monsieur&quot;) ? &quot;none&quot; : &quot;block&quot;;&#10;                if (civilite === &quot;Monsieur&quot;) {&#10;                    epouseField.removeAttribute('required');&#10;                } else {&#10;                    // Don't make it required automatically&#10;                }&#10;            }&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (civiliteSelect) {&#10;            civiliteSelect.addEventListener('change', toggleSpouseField);&#10;            toggleSpouseField(); // Initial state&#10;        }&#10;    }&#10;&#10;    // Auto-save functionality&#10;    function setupAutoSave() {&#10;        const STORAGE_KEY = 'candidature_form_data';&#10;&#10;        // Load saved data&#10;        loadFormData();&#10;&#10;        // Save periodically&#10;        setInterval(saveFormData, 30000); // Every 30 seconds&#10;&#10;        // Save on page unload&#10;        window.addEventListener('beforeunload', saveFormData);&#10;    }&#10;&#10;    function saveFormData() {&#10;        const data = {};&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;        inputs.forEach(input =&gt; {&#10;            if (input.type === 'radio' || input.type === 'checkbox') {&#10;                if (input.checked) {&#10;                    data[input.name] = input.value;&#10;                }&#10;            } else {&#10;                data[input.name] = input.value;&#10;            }&#10;        });&#10;&#10;        localStorage.setItem('candidature_form_data', JSON.stringify(data));&#10;        showAutoSaveIndicator();&#10;    }&#10;&#10;    function loadFormData() {&#10;        const savedData = localStorage.getItem('candidature_form_data');&#10;        if (!savedData) return;&#10;&#10;        try {&#10;            const data = JSON.parse(savedData);&#10;            const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;            inputs.forEach(input =&gt; {&#10;                if (data[input.name] !== undefined) {&#10;                    if (input.type === 'radio' || input.type === 'checkbox') {&#10;                        input.checked = data[input.name] === input.value;&#10;                    } else {&#10;                        input.value = data[input.name];&#10;                    }&#10;                }&#10;            });&#10;        } catch (e) {&#10;            console.error('Error loading saved form data:', e);&#10;        }&#10;    }&#10;&#10;    function showAutoSaveIndicator() {&#10;        // Create or update auto-save indicator&#10;        let indicator = document.getElementById('autosave-indicator');&#10;        if (!indicator) {&#10;            indicator = document.createElement('div');&#10;            indicator.id = 'autosave-indicator';&#10;            indicator.style.cssText = `&#10;                position: fixed;&#10;                bottom: 20px;&#10;                right: 20px;&#10;                background: var(--success-color);&#10;                color: white;&#10;                padding: 8px 16px;&#10;                border-radius: 20px;&#10;                font-size: 0.8rem;&#10;                opacity: 0;&#10;                transition: opacity 0.3s;&#10;                z-index: 1000;&#10;            `;&#10;            document.body.appendChild(indicator);&#10;        }&#10;&#10;        indicator.textContent = 'Sauvegarde automatique ✓';&#10;        indicator.style.opacity = '1';&#10;&#10;        setTimeout(() =&gt; {&#10;            indicator.style.opacity = '0';&#10;        }, 2000);&#10;    }&#10;&#10;    // Additional form enhancements&#10;    function setupFormEnhancements() {&#10;        // Smooth focus transitions&#10;        const inputs = form.querySelectorAll('.formbold-form-input');&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('focus', function() {&#10;                this.parentNode.classList.add('focused');&#10;            });&#10;&#10;            input.addEventListener('blur', function() {&#10;                this.parentNode.classList.remove('focused');&#10;            });&#10;        });&#10;&#10;        // Progress bar click navigation&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.style.cursor = 'pointer';&#10;            step.addEventListener('mouseenter', function() {&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    this.style.transform = 'scale(1.05)';&#10;                }&#10;            });&#10;&#10;            step.addEventListener('mouseleave', function() {&#10;                this.style.transform = '';&#10;            });&#10;        });&#10;&#10;        // Keyboard navigation&#10;        document.addEventListener('keydown', function(e) {&#10;            if (e.ctrlKey || e.metaKey) {&#10;                switch(e.key) {&#10;                    case 'ArrowLeft':&#10;                        e.preventDefault();&#10;                        if (currentSection &gt; 0) {&#10;                            navigateToSection(currentSection - 1);&#10;                        }&#10;                        break;&#10;                    case 'ArrowRight':&#10;                        e.preventDefault();&#10;                        if (currentSection &lt; formSections.length - 1 &amp;&amp; validateSection(currentSection, false)) {&#10;                            navigateToSection(currentSection + 1);&#10;                        }&#10;                        break;&#10;                }&#10;            }&#10;        });&#10;&#10;        // Fix dropdown selection visibility issues&#10;        setupDropdownVisibilityFix();&#10;&#10;        // Form completion progress&#10;        updateCompletionProgress();&#10;        form.addEventListener('input', updateCompletionProgress);&#10;        form.addEventListener('change', updateCompletionProgress);&#10;    }&#10;&#10;    // Fix dropdown selection visibility issues&#10;    function setupDropdownVisibilityFix() {&#10;        const selectElements = document.querySelectorAll('select.formbold-form-input');&#10;&#10;        selectElements.forEach(select =&gt; {&#10;            // Force initial style application&#10;            forceSelectVisibility(select);&#10;&#10;            // Handle change events&#10;            select.addEventListener('change', function() {&#10;                forceSelectVisibility(this);&#10;                // Force re-render by briefly changing display&#10;                const originalDisplay = this.style.display;&#10;                this.style.display = 'none';&#10;                this.offsetHeight; // Trigger reflow&#10;                this.style.display = originalDisplay || 'block';&#10;            });&#10;&#10;            // Handle focus/blur events&#10;            select.addEventListener('focus', function() {&#10;                forceSelectVisibility(this);&#10;            });&#10;&#10;            select.addEventListener('blur', function() {&#10;                setTimeout(() =&gt; forceSelectVisibility(this), 10);&#10;            });&#10;        });&#10;    }&#10;&#10;    function forceSelectVisibility(selectElement) {&#10;        if (!selectElement) return;&#10;&#10;        // Force style properties&#10;        selectElement.style.color = '#2d3748';&#10;        selectElement.style.backgroundColor = '#ffffff';&#10;        selectElement.style.opacity = '1';&#10;&#10;        // Handle selected state&#10;        if (selectElement.value &amp;&amp; selectElement.value !== '') {&#10;            selectElement.style.fontWeight = '500';&#10;            selectElement.setAttribute('data-has-value', 'true');&#10;        } else {&#10;            selectElement.style.fontWeight = '400';&#10;            selectElement.removeAttribute('data-has-value');&#10;        }&#10;&#10;        // Force repaint&#10;        selectElement.offsetHeight;&#10;    }&#10;&#10;    // Apply fixes to all dropdowns on page load&#10;    function fixAllDropdowns() {&#10;        const allSelects = document.querySelectorAll('select.formbold-form-input');&#10;        allSelects.forEach(select =&gt; {&#10;            forceSelectVisibility(select);&#10;        });&#10;    }&#10;&#10;    function updateCompletionProgress() {&#10;        const allInputs = form.querySelectorAll('input[required], select[required], textarea[required]');&#10;        const filledInputs = Array.from(allInputs).filter(input =&gt; {&#10;            // Skip if input itself is hidden&#10;            if (input.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Check if parent form-group is hidden&#10;            const formGroup = input.closest('.form-group');&#10;            if (formGroup &amp;&amp; formGroup.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Special handling for radio buttons&#10;            if (input.type === 'radio') {&#10;                return form.querySelector(`input[name=&quot;${input.name}&quot;]:checked`);&#10;            }&#10;&#10;            return input.value.trim() !== '';&#10;        });&#10;&#10;        const progress = Math.round((filledInputs.length / allInputs.length) * 100);&#10;&#10;        // Update progress in header&#10;        let progressText = document.querySelector('.form-completion-progress');&#10;        if (!progressText) {&#10;            progressText = document.createElement('div');&#10;            progressText.className = 'form-completion-progress';&#10;            progressText.style.cssText = `&#10;                position: absolute;&#10;                top: 10px;&#10;                right: 20px;&#10;                background: rgba(255,255,255,0.2);&#10;                padding: 5px 12px;&#10;                border-radius: 15px;&#10;                font-size: 0.8rem;&#10;                z-index: 10;&#10;            `;&#10;            const formHeader = document.querySelector('.form-header');&#10;            if (formHeader) {&#10;                formHeader.appendChild(progressText);&#10;            }&#10;        }&#10;&#10;        if (progressText) {&#10;            progressText.textContent = `${progress}% complété`;&#10;        }&#10;    }&#10;&#10;    // We don't need this function anymore as we want normal form submission&#10;    function handleFormSubmit(e) {&#10;        // Do nothing, allow default form submission&#10;        console.log('Submit button clicked');&#10;    }&#10;&#10;    // Public API&#10;    window.formFunctions = {&#10;        navigateToSection,&#10;        validateSection,&#10;        saveFormData,&#10;        validateAllSections: () =&gt; {&#10;            for (let i = 0; i &lt; formSections.length - 1; i++) {&#10;                if (!validateSection(i, false)) {&#10;                    return false;&#10;                }&#10;            }&#10;            return true;&#10;        },&#10;        getCurrentSection: () =&gt; currentSection,&#10;        getTotalSections: () =&gt; formSections.length&#10;    };&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
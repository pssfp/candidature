<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/regions_departements.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/regions_departements.sql" />
              <option name="updatedContent" value="--&#10;-- Structure de la table `regions`&#10;--&#10;&#10;CREATE TABLE `regions` (&#10;  `id` int(11) NOT NULL,&#10;  `nom` varchar(255) NOT NULL&#10;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&#10;&#10;--&#10;-- Déchargement des données de la table `regions`&#10;--&#10;&#10;INSERT INTO `regions` (`id`, `nom`) VALUES&#10;(1, 'Adamaoua'),&#10;(2, 'Centre'),&#10;(3, 'Est'),&#10;(4, 'Extrême-Nord'),&#10;(5, 'Littoral'),&#10;(6, 'Nord'),&#10;(7, 'Nord-Ouest'),&#10;(8, 'Ouest'),&#10;(9, 'Sud'),&#10;(10, 'Sud-Ouest');&#10;&#10;-- --------------------------------------------------------&#10;&#10;--&#10;-- Structure de la table `departements`&#10;--&#10;&#10;CREATE TABLE `departements` (&#10;  `id` int(11) NOT NULL,&#10;  `nom` varchar(255) NOT NULL,&#10;  `region_id` int(11) NOT NULL&#10;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&#10;&#10;--&#10;-- Déchargement des données de la table `departements`&#10;--&#10;&#10;INSERT INTO `departements` (`id`, `nom`, `region_id`) VALUES&#10;-- Adamaoua&#10;(1, 'Djérem', 1),&#10;(2, 'Faro-et-Déo', 1),&#10;(3, 'Mayo-Banyo', 1),&#10;(4, 'Mbéré', 1),&#10;(5, 'Vina', 1),&#10;-- Centre&#10;(6, 'Haute-Sanaga', 2),&#10;(7, 'Lekié', 2),&#10;(8, 'Mbam-et-Inoubou', 2),&#10;(9, 'Mbam-et-Kim', 2),&#10;(10, 'Méfou-et-Afamba', 2),&#10;(11, 'Méfou-et-Akono', 2),&#10;(12, 'Mfoundi', 2),&#10;(13, 'Nyong-et-Kéllé', 2),&#10;(14, 'Nyong-et-Mfoumou', 2),&#10;(15, 'Nyong-et-So''o', 2),&#10;-- Est&#10;(16, 'Boumba-et-Ngoko', 3),&#10;(17, 'Haut-Nyong', 3),&#10;(18, 'Kadey', 3),&#10;(19, 'Lom-et-Djérem', 3),&#10;-- Extrême-Nord&#10;(20, 'Diamaré', 4),&#10;(21, 'Logone-et-Chari', 4),&#10;(22, 'Mayo-Danay', 4),&#10;(23, 'Mayo-Kani', 4),&#10;(24, 'Mayo-Sava', 4),&#10;(25, 'Mayo-Tsanaga', 4),&#10;-- Littoral&#10;(26, 'Moungo', 5),&#10;(27, 'Nkam', 5),&#10;(28, 'Sanaga-Maritime', 5),&#10;(29, 'Wouri', 5),&#10;-- Nord&#10;(30, 'Bénoué', 6),&#10;(31, 'Faro', 6),&#10;(32, 'Mayo-Louti', 6),&#10;(33, 'Mayo-Rey', 6),&#10;-- Nord-Ouest&#10;(34, 'Boyo', 7),&#10;(35, 'Bui', 7),&#10;(36, 'Donga-Mantung', 7),&#10;(37, 'Menchum', 7),&#10;(38, 'Mezam', 7),&#10;(39, 'Momo', 7),&#10;(40, 'Ngo-Ketunjia', 7),&#10;-- Ouest&#10;(41, 'Bamboutos', 8),&#10;(42, 'Haut-Nkam', 8),&#10;(43, 'Hauts-Plateaux', 8),&#10;(44, 'Koung-Khi', 8),&#10;(45, 'Ménoua', 8),&#10;(46, 'Mifi', 8),&#10;(47, 'Ndé', 8),&#10;(48, 'Noun', 8),&#10;-- Sud&#10;(49, 'Dja-et-Lobo', 9),&#10;(50, 'Mvila', 9),&#10;(51, 'Océan', 9),&#10;(52, 'Vallée-du-Ntem', 9),&#10;-- Sud-Ouest&#10;(53, 'Fako', 10),&#10;(54, 'Koupé-Manengouba', 10),&#10;(55, 'Lebialem', 10),&#10;(56, 'Manyu', 10),&#10;(57, 'Meme', 10),&#10;(58, 'Ndian', 10);&#10;&#10;--&#10;-- Index pour les tables déchargées&#10;--&#10;&#10;--&#10;-- Index pour la table `regions`&#10;--&#10;ALTER TABLE `regions`&#10;  ADD PRIMARY KEY (`id`);&#10;&#10;--&#10;-- Index pour la table `departements`&#10;--&#10;ALTER TABLE `departements`&#10;  ADD PRIMARY KEY (`id`),&#10;  ADD KEY `region_id` (`region_id`);&#10;&#10;--&#10;-- AUTO_INCREMENT pour les tables déchargées&#10;--&#10;&#10;--&#10;-- AUTO_INCREMENT pour la table `regions`&#10;--&#10;ALTER TABLE `regions`&#10;  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;&#10;&#10;--&#10;-- AUTO_INCREMENT pour la table `departements`&#10;--&#10;ALTER TABLE `departements`&#10;  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=59;&#10;&#10;--&#10;-- Contraintes pour les tables déchargées&#10;--&#10;&#10;--&#10;-- Contraintes pour la table `departements`&#10;--&#10;ALTER TABLE `departements`&#10;  ADD CONSTRAINT `departements_ibfk_1` FOREIGN KEY (`region_id`) REFERENCES `regions` (`id`);&#10;COMMIT;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/resources/js/modern-form.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/resources/js/modern-form.js" />
              <option name="originalContent" value="/**&#10; * Enhanced Modern Form JavaScript - Fixed Multi-Step Navigation&#10; * Advanced UX features for the candidature form&#10; */&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    // Form elements and state&#10;    const formSections = document.querySelectorAll('.form-section');&#10;    const progressSteps = document.querySelectorAll('.progress-step');&#10;    const form = document.getElementById('candidatureForm');&#10;    let currentSection = 0;&#10;&#10;    // Initialize form&#10;    initializeForm();&#10;&#10;    function initializeForm() {&#10;        setupProgressBar();&#10;        setupSectionNavigation();&#10;        setupFormValidation();&#10;        setupConditionalFields();&#10;        setupAutoSave();&#10;        setupFormEnhancements();&#10;        setupFormSubmission(); // Added form submission handling&#10;        showSection(0);&#10;&#10;        // Initial button state update after everything is loaded&#10;        setTimeout(() =&gt; {&#10;            updateCurrentSectionNavigationButtons();&#10;        }, 100);&#10;&#10;    }&#10;&#10;    // Progress bar and section management&#10;    function setupProgressBar() {&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.addEventListener('click', () =&gt; {&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    navigateToSection(index);&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    function showSection(sectionIndex) {&#10;&#10;        // Hide all sections and remove active class&#10;        formSections.forEach((section, index) =&gt; {&#10;            section.style.display = 'none';&#10;            section.classList.remove('active');&#10;        });&#10;&#10;        // Show the target section and add active class&#10;        if (formSections[sectionIndex]) {&#10;            formSections[sectionIndex].style.display = 'block'; // Explicitly set to block&#10;            formSections[sectionIndex].classList.add('active');&#10;            currentSection = sectionIndex;&#10;        } else {&#10;            return;&#10;        }&#10;&#10;        updateProgress(sectionIndex);&#10;&#10;        // Show/hide only the submit button on last section, keep navigation always visible&#10;        const submitBtn = document.querySelector('.form-actions .btn-success, .form-actions button[type=&quot;submit&quot;]');&#10;        if (submitBtn) {&#10;            if (sectionIndex === formSections.length - 1) {&#10;                submitBtn.style.display = '';&#10;            } else {&#10;                submitBtn.style.display = 'none';&#10;            }&#10;        }&#10;        // Always show form-actions (navigation)&#10;        const formActions = document.querySelector('.form-actions');&#10;        if (formActions) {&#10;            formActions.style.display = '';&#10;        }&#10;&#10;        updateCurrentSectionNavigationButtons();&#10;    }&#10;&#10;    function updateProgress(step) {&#10;        progressSteps.forEach((progressStep, index) =&gt; {&#10;            progressStep.classList.remove('active', 'completed');&#10;&#10;            if (index &lt; step) {&#10;                progressStep.classList.add('completed');&#10;            } else if (index === step) {&#10;                progressStep.classList.add('active');&#10;            }&#10;        });&#10;    }&#10;&#10;    function navigateToSection(targetSection) {&#10;        if (targetSection &gt;= 0 &amp;&amp; targetSection &lt; formSections.length) {&#10;            showSection(targetSection);&#10;        }&#10;    }&#10;&#10;    // Added function to properly handle form submission&#10;    function setupFormSubmission() {&#10;        // Get the form and submit button&#10;        const form = document.getElementById('candidatureForm');&#10;        const submitBtn = document.querySelector('.btn-success[type=&quot;submit&quot;]');&#10;&#10;        if (form &amp;&amp; submitBtn) {&#10;            // Remove any previous event listeners that might be blocking submission&#10;            const clonedSubmitBtn = submitBtn.cloneNode(true);&#10;            submitBtn.parentNode.replaceChild(clonedSubmitBtn, submitBtn);&#10;&#10;            // Add proper submit handler to the form itself&#10;            form.addEventListener('submit', function(e) {&#10;                // Don't prevent the default submission - this is crucial!&#10;                console.log('Form is being submitted...');&#10;&#10;                // Store the original text to restore it if needed&#10;                const originalText = clonedSubmitBtn.innerHTML;&#10;&#10;                // Add loading state to submit button&#10;                clonedSubmitBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Envoi en cours...';&#10;&#10;                // Set a timeout to ensure the form can still submit if something goes wrong&#10;                setTimeout(function() {&#10;                    // This ensures the form submission completes even if there's a delay&#10;                    if (form.getAttribute('data-submitting') !== 'true') {&#10;                        form.setAttribute('data-submitting', 'true');&#10;                        form.submit();&#10;                    }&#10;                }, 1000);&#10;&#10;                // Allow normal form submission&#10;                return true;&#10;            });&#10;&#10;            // Clear any previously saved form data to avoid conflicts&#10;            try {&#10;                localStorage.removeItem('candidature_form_data');&#10;            } catch (e) {&#10;                console.log('Could not clear form data from localStorage');&#10;            }&#10;        }&#10;    }&#10;&#10;    // Function to validate all sections&#10;    function validateAllSections() {&#10;        let isValid = true;&#10;&#10;        // Get all required fields&#10;        const requiredFields = form.querySelectorAll('[required]');&#10;&#10;        // Check each required field&#10;        requiredFields.forEach(field =&gt; {&#10;            if (!field.value.trim()) {&#10;                isValid = false;&#10;                field.classList.add('error');&#10;            } else {&#10;                field.classList.remove('error');&#10;            }&#10;        });&#10;&#10;        return isValid;&#10;    }&#10;&#10;    // Section navigation&#10;    function setupSectionNavigation() {&#10;        formSections.forEach((section, index) =&gt; {&#10;            // Remove existing navigation if any&#10;            const existingNav = section.querySelector('.form-navigation');&#10;            if (existingNav) {&#10;                existingNav.remove();&#10;            }&#10;&#10;            // Skip navigation for review section - it will be handled by review-form.js&#10;            if (section.id === 'review-section') {&#10;                return;&#10;            }&#10;&#10;            // Create navigation container&#10;            const navContainer = document.createElement('div');&#10;            navContainer.className = 'form-navigation';&#10;&#10;            // Previous button&#10;            if (index &gt; 0) {&#10;                const prevButton = createButton('Précédent', 'btn btn-secondary', () =&gt; {&#10;                    navigateToSection(index - 1);&#10;                });&#10;                prevButton.innerHTML = '&lt;i class=&quot;fas fa-arrow-left&quot;&gt;&lt;/i&gt; &lt;span&gt;Précédent&lt;/span&gt;';&#10;                navContainer.appendChild(prevButton);&#10;            }&#10;&#10;            // Next button - check if this is the last regular section (before review)&#10;            const isLastRegularSection = index === formSections.length - 2 &amp;&amp; formSections[formSections.length - 1].id === 'review-section';&#10;&#10;            if (index &lt; formSections.length - 1 &amp;&amp; !isLastRegularSection) {&#10;                const nextButton = createButton('Suivant', 'btn btn-primary', () =&gt; {&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        navigateToSection(index + 1);&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                nextButton.innerHTML = '&lt;span&gt;Suivant&lt;/span&gt; &lt;i class=&quot;fas fa-arrow-right&quot;&gt;&lt;/i&gt;';&#10;                nextButton.setAttribute('data-button-type', 'next');&#10;                navContainer.appendChild(nextButton);&#10;            } else if (isLastRegularSection) {&#10;                // This will be handled by review-form.js&#10;                const reviewButton = createButton('Vérifier ma candidature', 'btn btn-primary', () =&gt; {&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        // Trigger review section navigation&#10;                        window.dispatchEvent(new CustomEvent('navigateToReview', { detail: { fromSection: index } }));&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                reviewButton.innerHTML = '&lt;span&gt;Vérifier ma candidature&lt;/span&gt; &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;';&#10;                reviewButton.setAttribute('data-button-type', 'review');&#10;                navContainer.appendChild(reviewButton);&#10;            }&#10;&#10;            section.appendChild(navContainer);&#10;        });&#10;    }&#10;&#10;    function createButton(text, className, onClick) {&#10;        const button = document.createElement('button');&#10;        button.type = 'button'; // Important: prevent form submission&#10;        // button.textContent = text; // This will be set by innerHTML&#10;        button.className = className;&#10;        button.addEventListener('click', (e) =&gt; {&#10;            e.preventDefault(); // Prevent any default behavior&#10;            onClick();&#10;        });&#10;        return button;&#10;    }&#10;&#10;    function updateNavigationButtons(sectionIndex) {&#10;        const navigation = formSections[sectionIndex]?.querySelector('.form-navigation');&#10;        if (!navigation) return;&#10;&#10;        const nextBtn = navigation.querySelector('.btn-primary');&#10;&#10;        // Update button states based on validation&#10;        if (nextBtn) {&#10;            const isValid = validateSection(sectionIndex, false);&#10;            nextBtn.disabled = !isValid;&#10;            nextBtn.classList.toggle('loading', false);&#10;        }&#10;    }&#10;&#10;    // New function to update current section's navigation buttons&#10;    function updateCurrentSectionNavigationButtons() {&#10;        updateNavigationButtons(currentSection);&#10;    }&#10;&#10;    // Enhanced validation&#10;    function setupFormValidation() {&#10;        // Real-time validation with comprehensive event handling&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;        inputs.forEach(input =&gt; {&#10;            // Validate on blur&#10;            input.addEventListener('blur', () =&gt; {&#10;                validateField(input);&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;&#10;            // Clear errors and update on input (typing)&#10;            input.addEventListener('input', () =&gt; {&#10;                clearFieldError(input);&#10;                saveFormData();&#10;                clearTimeout(input.validationTimeout);&#10;                input.validationTimeout = setTimeout(() =&gt; {&#10;                    validateField(input, false);&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 300);&#10;            });&#10;&#10;            // Immediate validation on keyup for instant feedback&#10;            input.addEventListener('keyup', () =&gt; {&#10;                clearTimeout(input.keyupTimeout);&#10;                input.keyupTimeout = setTimeout(() =&gt; {&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 100);&#10;            });&#10;&#10;            // Always update on change for all input types (select, radio, checkbox, text, etc.)&#10;            input.addEventListener('change', () =&gt; {&#10;                validateField(input);&#10;                saveFormData();&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;        });&#10;&#10;        // Additional global form change listener as fallback&#10;        form.addEventListener('change', () =&gt; {&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        });&#10;&#10;        // On DOM ready, after autofill, update button state&#10;        window.addEventListener('pageshow', updateCurrentSectionNavigationButtons);&#10;        window.addEventListener('load', updateCurrentSectionNavigationButtons);&#10;    }&#10;&#10;    function validateSection(sectionIndex, showErrors = true) {&#10;        const section = formSections[sectionIndex];&#10;        if (!section) return true;&#10;&#10;        const requiredFields = section.querySelectorAll('input[required], select[required], textarea[required]');&#10;        let isValid = true;&#10;&#10;        requiredFields.forEach(field =&gt; {&#10;            // Proper null check before accessing style property&#10;            if (!field) return;&#10;&#10;            // Skip hidden fields - check both the field and its container&#10;            const isFieldHidden = field.style.display === 'none';&#10;            const formGroup = field.closest('.form-group');&#10;            const isContainerHidden = formGroup &amp;&amp; formGroup.style.display === 'none';&#10;&#10;            if (isFieldHidden || isContainerHidden) {&#10;                return;&#10;            }&#10;&#10;            if (!validateField(field, showErrors)) {&#10;                isValid = false;&#10;            }&#10;        });&#10;&#10;        // Custom validations&#10;        isValid = performCustomValidations(section, showErrors) &amp;&amp; isValid;&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function validateField(field, showErrors = true) {&#10;        const value = field.value.trim();&#10;        const isRequired = field.hasAttribute('required');&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        clearFieldError(field);&#10;&#10;        // Skip validation for hidden fields&#10;        if (field.style.display === 'none' || (field.closest('.form-group') &amp;&amp; field.closest('.form-group').style.display === 'none')) {&#10;            return true;&#10;        }&#10;&#10;        // Special handling for radio buttons&#10;        if (field.type === 'radio' &amp;&amp; isRequired) {&#10;            const radioGroup = form.querySelectorAll(`input[name=&quot;${field.name}&quot;]`);&#10;            const isChecked = Array.from(radioGroup).some(radio =&gt; radio.checked);&#10;            if (!isChecked) {&#10;                if (showErrors) {&#10;                    const radioContainer = field.closest('.radio-group');&#10;                    showFieldError(radioContainer || field, 'Veuillez sélectionner une option');&#10;                }&#10;                isValid = false;&#10;            }&#10;            return isValid; // Return early for radio buttons&#10;        }&#10;&#10;        // Required field validation for non-radio fields&#10;        if (isRequired &amp;&amp; !value) {&#10;            if (showErrors) {&#10;                showFieldError(field, 'Ce champ est obligatoire');&#10;            }&#10;            isValid = false;&#10;        }&#10;&#10;        // Email validation&#10;        if (field.type === 'email' &amp;&amp; value) {&#10;            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;            if (!emailRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer une adresse email valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Phone validation&#10;        if (field.type === 'tel' &amp;&amp; field.name.includes('telephone') &amp;&amp; value) {&#10;            const phoneRegex = /^[0-9+\-\s()]{10,}$/;&#10;            if (!phoneRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer un numéro de téléphone valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Update field appearance&#10;        field.classList.toggle('is-invalid', !isValid);&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function performCustomValidations(section, showErrors = true) {&#10;        let isValid = true;&#10;&#10;        // Email confirmation validation&#10;        const email = section.querySelector('#email');&#10;        const emailVerif = section.querySelector('#emailverif');&#10;        if (email &amp;&amp; emailVerif &amp;&amp; email.value &amp;&amp; emailVerif.value) {&#10;            if (email.value !== emailVerif.value) {&#10;                if (showErrors) {&#10;                    showFieldError(emailVerif, 'Les adresses email ne correspondent pas');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Date validation&#10;        const daySelect = section.querySelector('#datenaiss_jj');&#10;        const monthSelect = section.querySelector('#datenaiss_mm');&#10;        const yearSelect = section.querySelector('#datenaiss_yy');&#10;&#10;        if (daySelect &amp;&amp; monthSelect &amp;&amp; yearSelect) {&#10;            const day = parseInt(daySelect.value);&#10;            const month = parseInt(monthSelect.value);&#10;            const year = parseInt(yearSelect.value);&#10;&#10;            if (day &amp;&amp; month &amp;&amp; year) {&#10;                const date = new Date(year, month - 1, day);&#10;                const today = new Date();&#10;                const age = today.getFullYear() - year;&#10;&#10;                if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {&#10;                    if (showErrors) {&#10;                        showFieldError(daySelect, 'Date invalide');&#10;                    }&#10;                    isValid = false;&#10;                } else if (age &lt; 18 || age &gt; 65) {&#10;                    if (showErrors) {&#10;                        showFieldError(yearSelect, 'L\'âge doit être entre 18 et 65 ans');&#10;                    }&#10;                    isValid = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function showFieldError(field, message) {&#10;        clearFieldError(field);&#10;&#10;        const errorDiv = document.createElement('div');&#10;        errorDiv.className = 'form-error';&#10;        errorDiv.textContent = message;&#10;&#10;        // Handle radio group errors differently&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            field.appendChild(errorDiv);&#10;        } else {&#10;            field.parentNode.appendChild(errorDiv);&#10;            field.classList.add('is-invalid');&#10;        }&#10;    }&#10;&#10;    function clearFieldError(field) {&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            const existingError = field.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;        } else {&#10;            const existingError = field.parentNode.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;            field.classList.remove('is-invalid');&#10;        }&#10;    }&#10;&#10;    function showValidationErrors(section) {&#10;        const errors = section.querySelectorAll('.form-error');&#10;        if (errors.length &gt; 0) {&#10;            errors[0].scrollIntoView({&#10;                behavior: 'smooth',&#10;                block: 'center'&#10;            });&#10;        }&#10;    }&#10;&#10;    function validateAllPreviousSections(targetSection) {&#10;        for (let i = 0; i &lt; targetSection; i++) {&#10;            if (!validateSection(i, false)) {&#10;                return false;&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // Conditional fields logic&#10;    function setupConditionalFields() {&#10;        const statutProfSelect = document.getElementById('statut');&#10;        const employerFields = document.querySelectorAll('.employer-field');&#10;&#10;        function toggleEmployerFields() {&#10;            const selectedStatus = statutProfSelect?.value;&#10;            const showFields = ['Fonctionnaire', 'Travailleur privé'].includes(selectedStatus);&#10;&#10;            employerFields.forEach(field =&gt; {&#10;                field.style.display = showFields ? 'block' : 'none';&#10;                field.classList.toggle('active', showFields);&#10;&#10;                const inputs = field.querySelectorAll('input');&#10;                inputs.forEach(input =&gt; {&#10;                    if (showFields) {&#10;                        input.setAttribute('required', 'required');&#10;                    } else {&#10;                        input.removeAttribute('required');&#10;                        clearFieldError(input);&#10;                    }&#10;                });&#10;            });&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (statutProfSelect) {&#10;            statutProfSelect.addEventListener('change', toggleEmployerFields);&#10;            toggleEmployerFields(); // Initial state&#10;        }&#10;&#10;        // Spouse name field logic&#10;        const civiliteSelect = document.getElementById('civilite');&#10;        const epouseField = document.getElementById('epouse');&#10;&#10;        function toggleSpouseField() {&#10;            const civilite = civiliteSelect?.value;&#10;            if (epouseField) {&#10;                epouseField.style.display = (civilite === &quot;Monsieur&quot;) ? &quot;none&quot; : &quot;block&quot;;&#10;                if (civilite === &quot;Monsieur&quot;) {&#10;                    epouseField.removeAttribute('required');&#10;                } else {&#10;                    // Don't make it required automatically&#10;                }&#10;            }&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (civiliteSelect) {&#10;            civiliteSelect.addEventListener('change', toggleSpouseField);&#10;            toggleSpouseField(); // Initial state&#10;        }&#10;    }&#10;&#10;    // Auto-save functionality&#10;    function setupAutoSave() {&#10;        const STORAGE_KEY = 'candidature_form_data';&#10;&#10;        // Load saved data&#10;        loadFormData();&#10;&#10;        // Save periodically&#10;        setInterval(saveFormData, 30000); // Every 30 seconds&#10;&#10;        // Save on page unload&#10;        window.addEventListener('beforeunload', saveFormData);&#10;    }&#10;&#10;    function saveFormData() {&#10;        const data = {};&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;        inputs.forEach(input =&gt; {&#10;            if (input.type === 'radio' || input.type === 'checkbox') {&#10;                if (input.checked) {&#10;                    data[input.name] = input.value;&#10;                }&#10;            } else {&#10;                data[input.name] = input.value;&#10;            }&#10;        });&#10;&#10;        localStorage.setItem('candidature_form_data', JSON.stringify(data));&#10;        showAutoSaveIndicator();&#10;    }&#10;&#10;    function loadFormData() {&#10;        const savedData = localStorage.getItem('candidature_form_data');&#10;        if (!savedData) return;&#10;&#10;        try {&#10;            const data = JSON.parse(savedData);&#10;            const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;            inputs.forEach(input =&gt; {&#10;                if (data[input.name] !== undefined) {&#10;                    if (input.type === 'radio' || input.type === 'checkbox') {&#10;                        input.checked = data[input.name] === input.value;&#10;                    } else {&#10;                        input.value = data[input.name];&#10;                    }&#10;                }&#10;            });&#10;        } catch (e) {&#10;            console.error('Error loading saved form data:', e);&#10;        }&#10;    }&#10;&#10;    function showAutoSaveIndicator() {&#10;        // Create or update auto-save indicator&#10;        let indicator = document.getElementById('autosave-indicator');&#10;        if (!indicator) {&#10;            indicator = document.createElement('div');&#10;            indicator.id = 'autosave-indicator';&#10;            indicator.style.cssText = `&#10;                position: fixed;&#10;                bottom: 20px;&#10;                right: 20px;&#10;                background: var(--success-color);&#10;                color: white;&#10;                padding: 8px 16px;&#10;                border-radius: 20px;&#10;                font-size: 0.8rem;&#10;                opacity: 0;&#10;                transition: opacity 0.3s;&#10;                z-index: 1000;&#10;            `;&#10;            document.body.appendChild(indicator);&#10;        }&#10;&#10;        indicator.textContent = 'Sauvegarde automatique ✓';&#10;        indicator.style.opacity = '1';&#10;&#10;        setTimeout(() =&gt; {&#10;            indicator.style.opacity = '0';&#10;        }, 2000);&#10;    }&#10;&#10;    // Additional form enhancements&#10;    function setupFormEnhancements() {&#10;        // Smooth focus transitions&#10;        const inputs = form.querySelectorAll('.formbold-form-input');&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('focus', function() {&#10;                this.parentNode.classList.add('focused');&#10;            });&#10;&#10;            input.addEventListener('blur', function() {&#10;                this.parentNode.classList.remove('focused');&#10;            });&#10;        });&#10;&#10;        // Progress bar click navigation&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.style.cursor = 'pointer';&#10;            step.addEventListener('mouseenter', function() {&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    this.style.transform = 'scale(1.05)';&#10;                }&#10;            });&#10;&#10;            step.addEventListener('mouseleave', function() {&#10;                this.style.transform = '';&#10;            });&#10;        });&#10;&#10;        // Keyboard navigation&#10;        document.addEventListener('keydown', function(e) {&#10;            if (e.ctrlKey || e.metaKey) {&#10;                switch(e.key) {&#10;                    case 'ArrowLeft':&#10;                        e.preventDefault();&#10;                        if (currentSection &gt; 0) {&#10;                            navigateToSection(currentSection - 1);&#10;                        }&#10;                        break;&#10;                    case 'ArrowRight':&#10;                        e.preventDefault();&#10;                        if (currentSection &lt; formSections.length - 1 &amp;&amp; validateSection(currentSection, false)) {&#10;                            navigateToSection(currentSection + 1);&#10;                        }&#10;                        break;&#10;                }&#10;            }&#10;        });&#10;&#10;        // Fix dropdown selection visibility issues&#10;        setupDropdownVisibilityFix();&#10;&#10;        // Form completion progress&#10;        updateCompletionProgress();&#10;        form.addEventListener('input', updateCompletionProgress);&#10;        form.addEventListener('change', updateCompletionProgress);&#10;    }&#10;&#10;    // Fix dropdown selection visibility issues&#10;    function setupDropdownVisibilityFix() {&#10;        const selectElements = document.querySelectorAll('select.formbold-form-input');&#10;&#10;        selectElements.forEach(select =&gt; {&#10;            // Force initial style application&#10;            forceSelectVisibility(select);&#10;&#10;            // Handle change events&#10;            select.addEventListener('change', function() {&#10;                forceSelectVisibility(this);&#10;                // Force re-render by briefly changing display&#10;                const originalDisplay = this.style.display;&#10;                this.style.display = 'none';&#10;                this.offsetHeight; // Trigger reflow&#10;                this.style.display = originalDisplay || 'block';&#10;            });&#10;&#10;            // Handle focus/blur events&#10;            select.addEventListener('focus', function() {&#10;                forceSelectVisibility(this);&#10;            });&#10;&#10;            select.addEventListener('blur', function() {&#10;                setTimeout(() =&gt; forceSelectVisibility(this), 10);&#10;            });&#10;        });&#10;    }&#10;&#10;    function forceSelectVisibility(selectElement) {&#10;        if (!selectElement) return;&#10;&#10;        // Force style properties&#10;        selectElement.style.color = '#2d3748';&#10;        selectElement.style.backgroundColor = '#ffffff';&#10;        selectElement.style.opacity = '1';&#10;&#10;        // Handle selected state&#10;        if (selectElement.value &amp;&amp; selectElement.value !== '') {&#10;            selectElement.style.fontWeight = '500';&#10;            selectElement.setAttribute('data-has-value', 'true');&#10;        } else {&#10;            selectElement.style.fontWeight = '400';&#10;            selectElement.removeAttribute('data-has-value');&#10;        }&#10;&#10;        // Force repaint&#10;        selectElement.offsetHeight;&#10;    }&#10;&#10;    // Apply fixes to all dropdowns on page load&#10;    function fixAllDropdowns() {&#10;        const allSelects = document.querySelectorAll('select.formbold-form-input');&#10;        allSelects.forEach(select =&gt; {&#10;            forceSelectVisibility(select);&#10;        });&#10;    }&#10;&#10;    function updateCompletionProgress() {&#10;        const allInputs = form.querySelectorAll('input[required], select[required], textarea[required]');&#10;        const filledInputs = Array.from(allInputs).filter(input =&gt; {&#10;            // Skip if input itself is hidden&#10;            if (input.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Check if parent form-group is hidden&#10;            const formGroup = input.closest('.form-group');&#10;            if (formGroup &amp;&amp; formGroup.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Special handling for radio buttons&#10;            if (input.type === 'radio') {&#10;                return form.querySelector(`input[name=&quot;${input.name}&quot;]:checked`);&#10;            }&#10;&#10;            return input.value.trim() !== '';&#10;        });&#10;&#10;        const progress = Math.round((filledInputs.length / allInputs.length) * 100);&#10;&#10;        // Update progress in header&#10;        let progressText = document.querySelector('.form-completion-progress');&#10;        if (!progressText) {&#10;            progressText = document.createElement('div');&#10;            progressText.className = 'form-completion-progress';&#10;            progressText.style.cssText = `&#10;                position: absolute;&#10;                top: 10px;&#10;                right: 20px;&#10;                background: rgba(255,255,255,0.2);&#10;                padding: 5px 12px;&#10;                border-radius: 15px;&#10;                font-size: 0.8rem;&#10;                z-index: 10;&#10;            `;&#10;            const formHeader = document.querySelector('.form-header');&#10;            if (formHeader) {&#10;                formHeader.appendChild(progressText);&#10;            }&#10;        }&#10;&#10;        if (progressText) {&#10;            progressText.textContent = `${progress}% complété`;&#10;        }&#10;    }&#10;&#10;    // We don't need this function anymore as we want normal form submission&#10;    function handleFormSubmit(e) {&#10;        // Allow the form to submit normally - don't prevent default!&#10;        console.log('Submit button clicked, allowing normal submission...');&#10;        return true;&#10;    }&#10;&#10;    // Public API&#10;    window.formFunctions = {&#10;        navigateToSection,&#10;        validateSection,&#10;        saveFormData,&#10;        validateAllSections: () =&gt; {&#10;            for (let i = 0; i &lt; formSections.length - 1; i++) {&#10;                if (!validateSection(i, false)) {&#10;                    return false;&#10;                }&#10;            }&#10;            return true;&#10;        },&#10;        getCurrentSection: () =&gt; currentSection,&#10;        getTotalSections: () =&gt; formSections.length&#10;    };&#10;});&#10;" />
              <option name="updatedContent" value="/**&#10; * Enhanced Modern Form JavaScript - Fixed Multi-Step Navigation&#10; * Advanced UX features for the candidature form&#10; */&#10;&#10;document.addEventListener('DOMContentLoaded', function () {&#10;    // Form elements and state&#10;    const formSections = document.querySelectorAll('.form-section');&#10;    const progressSteps = document.querySelectorAll('.progress-step');&#10;    const form = document.getElementById('candidatureForm');&#10;    let currentSection = 0;&#10;&#10;    // Initialize form&#10;    initializeForm();&#10;&#10;    function initializeForm() {&#10;        setupProgressBar();&#10;        setupSectionNavigation();&#10;        setupFormValidation();&#10;        setupConditionalFields();&#10;        setupAutoSave();&#10;        setupFormEnhancements();&#10;        setupFormSubmission(); // Added form submission handling&#10;        showSection(0);&#10;&#10;        // Initial button state update after everything is loaded&#10;        setTimeout(() =&gt; {&#10;            updateCurrentSectionNavigationButtons();&#10;        }, 100);&#10;&#10;    }&#10;&#10;    // Progress bar and section management&#10;    function setupProgressBar() {&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.addEventListener('click', () =&gt; {&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    navigateToSection(index);&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    function showSection(sectionIndex) {&#10;&#10;        // Hide all sections and remove active class&#10;        formSections.forEach((section, index) =&gt; {&#10;            section.style.display = 'none';&#10;            section.classList.remove('active');&#10;        });&#10;&#10;        // Show the target section and add active class&#10;        if (formSections[sectionIndex]) {&#10;            formSections[sectionIndex].style.display = 'block'; // Explicitly set to block&#10;            formSections[sectionIndex].classList.add('active');&#10;            currentSection = sectionIndex;&#10;        } else {&#10;            return;&#10;        }&#10;&#10;        updateProgress(sectionIndex);&#10;&#10;        // Show/hide only the submit button on last section, keep navigation always visible&#10;        const submitBtn = document.querySelector('.form-actions .btn-success, .form-actions button[type=&quot;submit&quot;]');&#10;        if (submitBtn) {&#10;            if (sectionIndex === formSections.length - 1) {&#10;                submitBtn.style.display = '';&#10;            } else {&#10;                submitBtn.style.display = 'none';&#10;            }&#10;        }&#10;        // Always show form-actions (navigation)&#10;        const formActions = document.querySelector('.form-actions');&#10;        if (formActions) {&#10;            formActions.style.display = '';&#10;        }&#10;&#10;        updateCurrentSectionNavigationButtons();&#10;    }&#10;&#10;    function updateProgress(step) {&#10;        progressSteps.forEach((progressStep, index) =&gt; {&#10;            progressStep.classList.remove('active', 'completed');&#10;&#10;            if (index &lt; step) {&#10;                progressStep.classList.add('completed');&#10;            } else if (index === step) {&#10;                progressStep.classList.add('active');&#10;            }&#10;        });&#10;    }&#10;&#10;    function navigateToSection(targetSection) {&#10;        if (targetSection &gt;= 0 &amp;&amp; targetSection &lt; formSections.length) {&#10;            showSection(targetSection);&#10;        }&#10;    }&#10;&#10;    // A more reliable form submission handler&#10;    function setupFormSubmission() {&#10;        const form = document.getElementById('candidatureForm');&#10;        if (!form) return;&#10;&#10;        form.addEventListener('submit', function(e) {&#10;            const submitBtn = form.querySelector('.btn-success[type=&quot;submit&quot;]');&#10;&#10;            // Prevent multiple submissions&#10;            if (form.getAttribute('data-submitting')) {&#10;                e.preventDefault();&#10;                return;&#10;            }&#10;&#10;            // Set submitting flag&#10;            form.setAttribute('data-submitting', 'true');&#10;&#10;            // Update button state&#10;            if (submitBtn) {&#10;                submitBtn.disabled = true;&#10;                submitBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Envoi en cours...';&#10;            }&#10;&#10;            // Clear saved data on successful submission&#10;            try {&#10;                localStorage.removeItem('candidature_form_data');&#10;            } catch (err) {&#10;                console.error('Could not clear form data from localStorage:', err);&#10;            }&#10;&#10;            // Allow the form to submit&#10;        });&#10;    }&#10;&#10;    // Function to validate all sections&#10;    function validateAllSections() {&#10;        let isValid = true;&#10;&#10;        // Get all required fields&#10;        const requiredFields = form.querySelectorAll('[required]');&#10;&#10;        // Check each required field&#10;        requiredFields.forEach(field =&gt; {&#10;            if (!field.value.trim()) {&#10;                isValid = false;&#10;                field.classList.add('error');&#10;            } else {&#10;                field.classList.remove('error');&#10;            }&#10;        });&#10;&#10;        return isValid;&#10;    }&#10;&#10;    // Section navigation&#10;    function setupSectionNavigation() {&#10;        formSections.forEach((section, index) =&gt; {&#10;            // Remove existing navigation if any&#10;            const existingNav = section.querySelector('.form-navigation');&#10;            if (existingNav) {&#10;                existingNav.remove();&#10;            }&#10;&#10;            // Skip navigation for review section - it will be handled by review-form.js&#10;            if (section.id === 'review-section') {&#10;                return;&#10;            }&#10;&#10;            // Create navigation container&#10;            const navContainer = document.createElement('div');&#10;            navContainer.className = 'form-navigation';&#10;&#10;            // Previous button&#10;            if (index &gt; 0) {&#10;                const prevButton = createButton('Précédent', 'btn btn-secondary', () =&gt; {&#10;                    navigateToSection(index - 1);&#10;                });&#10;                prevButton.innerHTML = '&lt;i class=&quot;fas fa-arrow-left&quot;&gt;&lt;/i&gt; &lt;span&gt;Précédent&lt;/span&gt;';&#10;                navContainer.appendChild(prevButton);&#10;            }&#10;&#10;            // Next button - check if this is the last regular section (before review)&#10;            const isLastRegularSection = index === formSections.length - 2 &amp;&amp; formSections[formSections.length - 1].id === 'review-section';&#10;&#10;            if (index &lt; formSections.length - 1 &amp;&amp; !isLastRegularSection) {&#10;                const nextButton = createButton('Suivant', 'btn btn-primary', () =&gt; {&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        navigateToSection(index + 1);&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                nextButton.innerHTML = '&lt;span&gt;Suivant&lt;/span&gt; &lt;i class=&quot;fas fa-arrow-right&quot;&gt;&lt;/i&gt;';&#10;                nextButton.setAttribute('data-button-type', 'next');&#10;                navContainer.appendChild(nextButton);&#10;            } else if (isLastRegularSection) {&#10;                // This will be handled by review-form.js&#10;                const reviewButton = createButton('Vérifier ma candidature', 'btn btn-primary', () =&gt; {&#10;                    if (validateSection(index)) {&#10;                        saveFormData();&#10;                        // Trigger review section navigation&#10;                        window.dispatchEvent(new CustomEvent('navigateToReview', { detail: { fromSection: index } }));&#10;                    } else {&#10;                        showValidationErrors(section);&#10;                    }&#10;                });&#10;                reviewButton.innerHTML = '&lt;span&gt;Vérifier ma candidature&lt;/span&gt; &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;';&#10;                reviewButton.setAttribute('data-button-type', 'review');&#10;                navContainer.appendChild(reviewButton);&#10;            }&#10;&#10;            section.appendChild(navContainer);&#10;        });&#10;    }&#10;&#10;    function createButton(text, className, onClick) {&#10;        const button = document.createElement('button');&#10;        button.type = 'button'; // Important: prevent form submission&#10;        // button.textContent = text; // This will be set by innerHTML&#10;        button.className = className;&#10;        button.addEventListener('click', (e) =&gt; {&#10;            e.preventDefault(); // Prevent any default behavior&#10;            onClick();&#10;        });&#10;        return button;&#10;    }&#10;&#10;    function updateNavigationButtons(sectionIndex) {&#10;        const navigation = formSections[sectionIndex]?.querySelector('.form-navigation');&#10;        if (!navigation) return;&#10;&#10;        const nextBtn = navigation.querySelector('.btn-primary');&#10;&#10;        // Update button states based on validation&#10;        if (nextBtn) {&#10;            const isValid = validateSection(sectionIndex, false);&#10;            nextBtn.disabled = !isValid;&#10;            nextBtn.classList.toggle('loading', false);&#10;        }&#10;    }&#10;&#10;    // New function to update current section's navigation buttons&#10;    function updateCurrentSectionNavigationButtons() {&#10;        updateNavigationButtons(currentSection);&#10;    }&#10;&#10;    // Enhanced validation&#10;    function setupFormValidation() {&#10;        // Real-time validation with comprehensive event handling&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;        inputs.forEach(input =&gt; {&#10;            // Validate on blur&#10;            input.addEventListener('blur', () =&gt; {&#10;                validateField(input);&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;&#10;            // Clear errors and update on input (typing)&#10;            input.addEventListener('input', () =&gt; {&#10;                clearFieldError(input);&#10;                saveFormData();&#10;                clearTimeout(input.validationTimeout);&#10;                input.validationTimeout = setTimeout(() =&gt; {&#10;                    validateField(input, false);&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 300);&#10;            });&#10;&#10;            // Immediate validation on keyup for instant feedback&#10;            input.addEventListener('keyup', () =&gt; {&#10;                clearTimeout(input.keyupTimeout);&#10;                input.keyupTimeout = setTimeout(() =&gt; {&#10;                    updateCurrentSectionNavigationButtons();&#10;                }, 100);&#10;            });&#10;&#10;            // Always update on change for all input types (select, radio, checkbox, text, etc.)&#10;            input.addEventListener('change', () =&gt; {&#10;                validateField(input);&#10;                saveFormData();&#10;                updateCurrentSectionNavigationButtons();&#10;            });&#10;        });&#10;&#10;        // Additional global form change listener as fallback&#10;        form.addEventListener('change', () =&gt; {&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        });&#10;&#10;        // On DOM ready, after autofill, update button state&#10;        window.addEventListener('pageshow', updateCurrentSectionNavigationButtons);&#10;        window.addEventListener('load', updateCurrentSectionNavigationButtons);&#10;    }&#10;&#10;    function validateSection(sectionIndex, showErrors = true) {&#10;        const section = formSections[sectionIndex];&#10;        if (!section) return true;&#10;&#10;        const requiredFields = section.querySelectorAll('input[required], select[required], textarea[required]');&#10;        let isValid = true;&#10;&#10;        requiredFields.forEach(field =&gt; {&#10;            // Proper null check before accessing style property&#10;            if (!field) return;&#10;&#10;            // Skip hidden fields - check both the field and its container&#10;            const isFieldHidden = field.style.display === 'none';&#10;            const formGroup = field.closest('.form-group');&#10;            const isContainerHidden = formGroup &amp;&amp; formGroup.style.display === 'none';&#10;&#10;            if (isFieldHidden || isContainerHidden) {&#10;                return;&#10;            }&#10;&#10;            if (!validateField(field, showErrors)) {&#10;                isValid = false;&#10;            }&#10;        });&#10;&#10;        // Custom validations&#10;        isValid = performCustomValidations(section, showErrors) &amp;&amp; isValid;&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function validateField(field, showErrors = true) {&#10;        const value = field.value.trim();&#10;        const isRequired = field.hasAttribute('required');&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        clearFieldError(field);&#10;&#10;        // Skip validation for hidden fields&#10;        if (field.style.display === 'none' || (field.closest('.form-group') &amp;&amp; field.closest('.form-group').style.display === 'none')) {&#10;            return true;&#10;        }&#10;&#10;        // Special handling for radio buttons&#10;        if (field.type === 'radio' &amp;&amp; isRequired) {&#10;            const radioGroup = form.querySelectorAll(`input[name=&quot;${field.name}&quot;]`);&#10;            const isChecked = Array.from(radioGroup).some(radio =&gt; radio.checked);&#10;            if (!isChecked) {&#10;                if (showErrors) {&#10;                    const radioContainer = field.closest('.radio-group');&#10;                    showFieldError(radioContainer || field, 'Veuillez sélectionner une option');&#10;                }&#10;                isValid = false;&#10;            }&#10;            return isValid; // Return early for radio buttons&#10;        }&#10;&#10;        // Required field validation for non-radio fields&#10;        if (isRequired &amp;&amp; !value) {&#10;            if (showErrors) {&#10;                showFieldError(field, 'Ce champ est obligatoire');&#10;            }&#10;            isValid = false;&#10;        }&#10;&#10;        // Email validation&#10;        if (field.type === 'email' &amp;&amp; value) {&#10;            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;            if (!emailRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer une adresse email valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Phone validation&#10;        if (field.type === 'tel' &amp;&amp; field.name.includes('telephone') &amp;&amp; value) {&#10;            const phoneRegex = /^[0-9+\-\s()]{10,}$/;&#10;            if (!phoneRegex.test(value)) {&#10;                if (showErrors) {&#10;                    showFieldError(field, 'Veuillez entrer un numéro de téléphone valide');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Update field appearance&#10;        field.classList.toggle('is-invalid', !isValid);&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function performCustomValidations(section, showErrors = true) {&#10;        let isValid = true;&#10;&#10;        // Email confirmation validation&#10;        const email = section.querySelector('#email');&#10;        const emailVerif = section.querySelector('#emailverif');&#10;        if (email &amp;&amp; emailVerif &amp;&amp; email.value &amp;&amp; emailVerif.value) {&#10;            if (email.value !== emailVerif.value) {&#10;                if (showErrors) {&#10;                    showFieldError(emailVerif, 'Les adresses email ne correspondent pas');&#10;                }&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Date validation&#10;        const daySelect = section.querySelector('#datenaiss_jj');&#10;        const monthSelect = section.querySelector('#datenaiss_mm');&#10;        const yearSelect = section.querySelector('#datenaiss_yy');&#10;&#10;        if (daySelect &amp;&amp; monthSelect &amp;&amp; yearSelect) {&#10;            const day = parseInt(daySelect.value);&#10;            const month = parseInt(monthSelect.value);&#10;            const year = parseInt(yearSelect.value);&#10;&#10;            if (day &amp;&amp; month &amp;&amp; year) {&#10;                const date = new Date(year, month - 1, day);&#10;                const today = new Date();&#10;                const age = today.getFullYear() - year;&#10;&#10;                if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {&#10;                    if (showErrors) {&#10;                        showFieldError(daySelect, 'Date invalide');&#10;                    }&#10;                    isValid = false;&#10;                } else if (age &lt; 18 || age &gt; 65) {&#10;                    if (showErrors) {&#10;                        showFieldError(yearSelect, 'L\'âge doit être entre 18 et 65 ans');&#10;                    }&#10;                    isValid = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    function showFieldError(field, message) {&#10;        clearFieldError(field);&#10;&#10;        const errorDiv = document.createElement('div');&#10;        errorDiv.className = 'form-error';&#10;        errorDiv.textContent = message;&#10;&#10;        // Handle radio group errors differently&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            field.appendChild(errorDiv);&#10;        } else {&#10;            field.parentNode.appendChild(errorDiv);&#10;            field.classList.add('is-invalid');&#10;        }&#10;    }&#10;&#10;    function clearFieldError(field) {&#10;        if (field.classList &amp;&amp; field.classList.contains('radio-group')) {&#10;            const existingError = field.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;        } else {&#10;            const existingError = field.parentNode.querySelector('.form-error');&#10;            if (existingError) {&#10;                existingError.remove();&#10;            }&#10;            field.classList.remove('is-invalid');&#10;        }&#10;    }&#10;&#10;    function showValidationErrors(section) {&#10;        const errors = section.querySelectorAll('.form-error');&#10;        if (errors.length &gt; 0) {&#10;            errors[0].scrollIntoView({&#10;                behavior: 'smooth',&#10;                block: 'center'&#10;            });&#10;        }&#10;    }&#10;&#10;    function validateAllPreviousSections(targetSection) {&#10;        for (let i = 0; i &lt; targetSection; i++) {&#10;            if (!validateSection(i, false)) {&#10;                return false;&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // Conditional fields logic&#10;    function setupConditionalFields() {&#10;        const statutProfSelect = document.getElementById('statut');&#10;        const employerFields = document.querySelectorAll('.employer-field');&#10;&#10;        function toggleEmployerFields() {&#10;            const selectedStatus = statutProfSelect?.value;&#10;            const showFields = ['Fonctionnaire', 'Travailleur privé'].includes(selectedStatus);&#10;&#10;            employerFields.forEach(field =&gt; {&#10;                field.style.display = showFields ? 'block' : 'none';&#10;                field.classList.toggle('active', showFields);&#10;&#10;                const inputs = field.querySelectorAll('input');&#10;                inputs.forEach(input =&gt; {&#10;                    if (showFields) {&#10;                        input.setAttribute('required', 'required');&#10;                    } else {&#10;                        input.removeAttribute('required');&#10;                        clearFieldError(input);&#10;                    }&#10;                });&#10;            });&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (statutProfSelect) {&#10;            statutProfSelect.addEventListener('change', toggleEmployerFields);&#10;            toggleEmployerFields(); // Initial state&#10;        }&#10;&#10;        // Spouse name field logic&#10;        const civiliteSelect = document.getElementById('civilite');&#10;        const epouseField = document.getElementById('epouse');&#10;&#10;        function toggleSpouseField() {&#10;            const civilite = civiliteSelect?.value;&#10;            if (epouseField) {&#10;                epouseField.style.display = (civilite === &quot;Monsieur&quot;) ? &quot;none&quot; : &quot;block&quot;;&#10;                if (civilite === &quot;Monsieur&quot;) {&#10;                    epouseField.removeAttribute('required');&#10;                } else {&#10;                    // Don't make it required automatically&#10;                }&#10;            }&#10;&#10;            // Update button state after changing conditional fields&#10;            setTimeout(updateCurrentSectionNavigationButtons, 50);&#10;        }&#10;&#10;        if (civiliteSelect) {&#10;            civiliteSelect.addEventListener('change', toggleSpouseField);&#10;            toggleSpouseField(); // Initial state&#10;        }&#10;    }&#10;&#10;    // Auto-save functionality&#10;    function setupAutoSave() {&#10;        const STORAGE_KEY = 'candidature_form_data';&#10;&#10;        // Load saved data&#10;        loadFormData();&#10;&#10;        // Save periodically&#10;        setInterval(saveFormData, 30000); // Every 30 seconds&#10;&#10;        // Save on page unload&#10;        window.addEventListener('beforeunload', saveFormData);&#10;    }&#10;&#10;    function saveFormData() {&#10;        const data = {};&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;        inputs.forEach(input =&gt; {&#10;            if (input.type === 'radio' || input.type === 'checkbox') {&#10;                if (input.checked) {&#10;                    data[input.name] = input.value;&#10;                }&#10;            } else {&#10;                data[input.name] = input.value;&#10;            }&#10;        });&#10;&#10;        localStorage.setItem('candidature_form_data', JSON.stringify(data));&#10;        showAutoSaveIndicator();&#10;    }&#10;&#10;    function loadFormData() {&#10;        const savedData = localStorage.getItem('candidature_form_data');&#10;        if (!savedData) return;&#10;&#10;        try {&#10;            const data = JSON.parse(savedData);&#10;            const inputs = form.querySelectorAll('input, select, textarea');&#10;&#10;            inputs.forEach(input =&gt; {&#10;                if (data[input.name] !== undefined) {&#10;                    if (input.type === 'radio' || input.type === 'checkbox') {&#10;                        input.checked = data[input.name] === input.value;&#10;                    } else {&#10;                        input.value = data[input.name];&#10;                    }&#10;                }&#10;            });&#10;        } catch (e) {&#10;            console.error('Error loading saved form data:', e);&#10;        }&#10;    }&#10;&#10;    function showAutoSaveIndicator() {&#10;        // Create or update auto-save indicator&#10;        let indicator = document.getElementById('autosave-indicator');&#10;        if (!indicator) {&#10;            indicator = document.createElement('div');&#10;            indicator.id = 'autosave-indicator';&#10;            indicator.style.cssText = `&#10;                position: fixed;&#10;                bottom: 20px;&#10;                right: 20px;&#10;                background: var(--success-color);&#10;                color: white;&#10;                padding: 8px 16px;&#10;                border-radius: 20px;&#10;                font-size: 0.8rem;&#10;                opacity: 0;&#10;                transition: opacity 0.3s;&#10;                z-index: 1000;&#10;            `;&#10;            document.body.appendChild(indicator);&#10;        }&#10;&#10;        indicator.textContent = 'Sauvegarde automatique ✓';&#10;        indicator.style.opacity = '1';&#10;&#10;        setTimeout(() =&gt; {&#10;            indicator.style.opacity = '0';&#10;        }, 2000);&#10;    }&#10;&#10;    // Additional form enhancements&#10;    function setupFormEnhancements() {&#10;        // Smooth focus transitions&#10;        const inputs = form.querySelectorAll('.formbold-form-input');&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('focus', function() {&#10;                this.parentNode.classList.add('focused');&#10;            });&#10;&#10;            input.addEventListener('blur', function() {&#10;                this.parentNode.classList.remove('focused');&#10;            });&#10;        });&#10;&#10;        // Progress bar click navigation&#10;        progressSteps.forEach((step, index) =&gt; {&#10;            step.style.cursor = 'pointer';&#10;            step.addEventListener('mouseenter', function() {&#10;                if (index &lt;= currentSection || validateAllPreviousSections(index)) {&#10;                    this.style.transform = 'scale(1.05)';&#10;                }&#10;            });&#10;&#10;            step.addEventListener('mouseleave', function() {&#10;                this.style.transform = '';&#10;            });&#10;        });&#10;&#10;        // Keyboard navigation&#10;        document.addEventListener('keydown', function(e) {&#10;            if (e.ctrlKey || e.metaKey) {&#10;                switch(e.key) {&#10;                    case 'ArrowLeft':&#10;                        e.preventDefault();&#10;                        if (currentSection &gt; 0) {&#10;                            navigateToSection(currentSection - 1);&#10;                        }&#10;                        break;&#10;                    case 'ArrowRight':&#10;                        e.preventDefault();&#10;                        if (currentSection &lt; formSections.length - 1 &amp;&amp; validateSection(currentSection, false)) {&#10;                            navigateToSection(currentSection + 1);&#10;                        }&#10;                        break;&#10;                }&#10;            }&#10;        });&#10;&#10;        // Fix dropdown selection visibility issues&#10;        setupDropdownVisibilityFix();&#10;&#10;        // Form completion progress&#10;        updateCompletionProgress();&#10;        form.addEventListener('input', updateCompletionProgress);&#10;        form.addEventListener('change', updateCompletionProgress);&#10;    }&#10;&#10;    // Fix dropdown selection visibility issues&#10;    function setupDropdownVisibilityFix() {&#10;        const selectElements = document.querySelectorAll('select.formbold-form-input');&#10;&#10;        selectElements.forEach(select =&gt; {&#10;            // Force initial style application&#10;            forceSelectVisibility(select);&#10;&#10;            // Handle change events&#10;            select.addEventListener('change', function() {&#10;                forceSelectVisibility(this);&#10;                // Force re-render by briefly changing display&#10;                const originalDisplay = this.style.display;&#10;                this.style.display = 'none';&#10;                this.offsetHeight; // Trigger reflow&#10;                this.style.display = originalDisplay || 'block';&#10;            });&#10;&#10;            // Handle focus/blur events&#10;            select.addEventListener('focus', function() {&#10;                forceSelectVisibility(this);&#10;            });&#10;&#10;            select.addEventListener('blur', function() {&#10;                setTimeout(() =&gt; forceSelectVisibility(this), 10);&#10;            });&#10;        });&#10;    }&#10;&#10;    function forceSelectVisibility(selectElement) {&#10;        if (!selectElement) return;&#10;&#10;        // Force style properties&#10;        selectElement.style.color = '#2d3748';&#10;        selectElement.style.backgroundColor = '#ffffff';&#10;        selectElement.style.opacity = '1';&#10;&#10;        // Handle selected state&#10;        if (selectElement.value &amp;&amp; selectElement.value !== '') {&#10;            selectElement.style.fontWeight = '500';&#10;            selectElement.setAttribute('data-has-value', 'true');&#10;        } else {&#10;            selectElement.style.fontWeight = '400';&#10;            selectElement.removeAttribute('data-has-value');&#10;        }&#10;&#10;        // Force repaint&#10;        selectElement.offsetHeight;&#10;    }&#10;&#10;    // Apply fixes to all dropdowns on page load&#10;    function fixAllDropdowns() {&#10;        const allSelects = document.querySelectorAll('select.formbold-form-input');&#10;        allSelects.forEach(select =&gt; {&#10;            forceSelectVisibility(select);&#10;        });&#10;    }&#10;&#10;    function updateCompletionProgress() {&#10;        const allInputs = form.querySelectorAll('input[required], select[required], textarea[required]');&#10;        const filledInputs = Array.from(allInputs).filter(input =&gt; {&#10;            // Skip if input itself is hidden&#10;            if (input.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Check if parent form-group is hidden&#10;            const formGroup = input.closest('.form-group');&#10;            if (formGroup &amp;&amp; formGroup.style.display === 'none') {&#10;                return true; // Consider hidden fields as filled&#10;            }&#10;&#10;            // Special handling for radio buttons&#10;            if (input.type === 'radio') {&#10;                return form.querySelector(`input[name=&quot;${input.name}&quot;]:checked`);&#10;            }&#10;&#10;            return input.value.trim() !== '';&#10;        });&#10;&#10;        const progress = Math.round((filledInputs.length / allInputs.length) * 100);&#10;&#10;        // Update progress in header&#10;        let progressText = document.querySelector('.form-completion-progress');&#10;        if (!progressText) {&#10;            progressText = document.createElement('div');&#10;            progressText.className = 'form-completion-progress';&#10;            progressText.style.cssText = `&#10;                position: absolute;&#10;                top: 10px;&#10;                right: 20px;&#10;                background: rgba(255,255,255,0.2);&#10;                padding: 5px 12px;&#10;                border-radius: 15px;&#10;                font-size: 0.8rem;&#10;                z-index: 10;&#10;            `;&#10;            const formHeader = document.querySelector('.form-header');&#10;            if (formHeader) {&#10;                formHeader.appendChild(progressText);&#10;            }&#10;        }&#10;&#10;        if (progressText) {&#10;            progressText.textContent = `${progress}% complété`;&#10;        }&#10;    }&#10;&#10;    // We don't need this function anymore as we want normal form submission&#10;    function handleFormSubmit(e) {&#10;        // Allow the form to submit normally - don't prevent default!&#10;        console.log('Submit button clicked, allowing normal submission...');&#10;        return true;&#10;    }&#10;&#10;    // Public API&#10;    window.formFunctions = {&#10;        navigateToSection,&#10;        validateSection,&#10;        saveFormData,&#10;        validateAllSections: () =&gt; {&#10;            for (let i = 0; i &lt; formSections.length - 1; i++) {&#10;                if (!validateSection(i, false)) {&#10;                    return false;&#10;                }&#10;            }&#10;            return true;&#10;        },&#10;        getCurrentSection: () =&gt; currentSection,&#10;        getTotalSections: () =&gt; formSections.length&#10;    };&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>